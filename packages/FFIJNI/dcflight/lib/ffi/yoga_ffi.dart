/*
 * Generated Yoga FFI bindings
 */

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// FFI bindings for Yoga layout engine
class YogaFFI {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  YogaFFI(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  YogaFFI.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> YGAlignToString(
    int arg0,
  ) {
    return _YGAlignToString(
      arg0,
    );
  }

  late final _YGAlignToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'YGAlignToString');
  late final _YGAlignToString =
      _YGAlignToStringPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> YGBoxSizingToString(
    int arg0,
  ) {
    return _YGBoxSizingToString(
      arg0,
    );
  }

  late final _YGBoxSizingToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'YGBoxSizingToString');
  late final _YGBoxSizingToString =
      _YGBoxSizingToStringPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> YGDimensionToString(
    int arg0,
  ) {
    return _YGDimensionToString(
      arg0,
    );
  }

  late final _YGDimensionToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'YGDimensionToString');
  late final _YGDimensionToString =
      _YGDimensionToStringPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> YGDirectionToString(
    int arg0,
  ) {
    return _YGDirectionToString(
      arg0,
    );
  }

  late final _YGDirectionToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'YGDirectionToString');
  late final _YGDirectionToString =
      _YGDirectionToStringPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> YGDisplayToString(
    int arg0,
  ) {
    return _YGDisplayToString(
      arg0,
    );
  }

  late final _YGDisplayToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'YGDisplayToString');
  late final _YGDisplayToString =
      _YGDisplayToStringPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> YGEdgeToString(
    int arg0,
  ) {
    return _YGEdgeToString(
      arg0,
    );
  }

  late final _YGEdgeToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'YGEdgeToString');
  late final _YGEdgeToString =
      _YGEdgeToStringPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> YGErrataToString(
    int arg0,
  ) {
    return _YGErrataToString(
      arg0,
    );
  }

  late final _YGErrataToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'YGErrataToString');
  late final _YGErrataToString =
      _YGErrataToStringPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> YGExperimentalFeatureToString(
    int arg0,
  ) {
    return _YGExperimentalFeatureToString(
      arg0,
    );
  }

  late final _YGExperimentalFeatureToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'YGExperimentalFeatureToString');
  late final _YGExperimentalFeatureToString = _YGExperimentalFeatureToStringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> YGFlexDirectionToString(
    int arg0,
  ) {
    return _YGFlexDirectionToString(
      arg0,
    );
  }

  late final _YGFlexDirectionToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'YGFlexDirectionToString');
  late final _YGFlexDirectionToString = _YGFlexDirectionToStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> YGGutterToString(
    int arg0,
  ) {
    return _YGGutterToString(
      arg0,
    );
  }

  late final _YGGutterToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'YGGutterToString');
  late final _YGGutterToString =
      _YGGutterToStringPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> YGJustifyToString(
    int arg0,
  ) {
    return _YGJustifyToString(
      arg0,
    );
  }

  late final _YGJustifyToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'YGJustifyToString');
  late final _YGJustifyToString =
      _YGJustifyToStringPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> YGLogLevelToString(
    int arg0,
  ) {
    return _YGLogLevelToString(
      arg0,
    );
  }

  late final _YGLogLevelToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'YGLogLevelToString');
  late final _YGLogLevelToString =
      _YGLogLevelToStringPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> YGMeasureModeToString(
    int arg0,
  ) {
    return _YGMeasureModeToString(
      arg0,
    );
  }

  late final _YGMeasureModeToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'YGMeasureModeToString');
  late final _YGMeasureModeToString = _YGMeasureModeToStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> YGNodeTypeToString(
    int arg0,
  ) {
    return _YGNodeTypeToString(
      arg0,
    );
  }

  late final _YGNodeTypeToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'YGNodeTypeToString');
  late final _YGNodeTypeToString =
      _YGNodeTypeToStringPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> YGOverflowToString(
    int arg0,
  ) {
    return _YGOverflowToString(
      arg0,
    );
  }

  late final _YGOverflowToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'YGOverflowToString');
  late final _YGOverflowToString =
      _YGOverflowToStringPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> YGPositionTypeToString(
    int arg0,
  ) {
    return _YGPositionTypeToString(
      arg0,
    );
  }

  late final _YGPositionTypeToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'YGPositionTypeToString');
  late final _YGPositionTypeToString = _YGPositionTypeToStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> YGUnitToString(
    int arg0,
  ) {
    return _YGUnitToString(
      arg0,
    );
  }

  late final _YGUnitToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'YGUnitToString');
  late final _YGUnitToString =
      _YGUnitToStringPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> YGWrapToString(
    int arg0,
  ) {
    return _YGWrapToString(
      arg0,
    );
  }

  late final _YGWrapToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'YGWrapToString');
  late final _YGWrapToString =
      _YGWrapToStringPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// Allocates a set of configuration options. The configuration may be applied to
  /// multiple nodes (i.e. a single global config), or can be applied more
  /// granularly per-node.
  YGConfigRef YGConfigNew() {
    return _YGConfigNew();
  }

  late final _YGConfigNewPtr =
      _lookup<ffi.NativeFunction<YGConfigRef Function()>>('YGConfigNew');
  late final _YGConfigNew =
      _YGConfigNewPtr.asFunction<YGConfigRef Function()>();

  /// Frees the associated Yoga configuration.
  void YGConfigFree(
    YGConfigRef config,
  ) {
    return _YGConfigFree(
      config,
    );
  }

  late final _YGConfigFreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGConfigRef)>>(
          'YGConfigFree');
  late final _YGConfigFree =
      _YGConfigFreePtr.asFunction<void Function(YGConfigRef)>();

  /// Returns the default config values set by Yoga.
  YGConfigConstRef YGConfigGetDefault() {
    return _YGConfigGetDefault();
  }

  late final _YGConfigGetDefaultPtr =
      _lookup<ffi.NativeFunction<YGConfigConstRef Function()>>(
          'YGConfigGetDefault');
  late final _YGConfigGetDefault =
      _YGConfigGetDefaultPtr.asFunction<YGConfigConstRef Function()>();

  /// Yoga by default creates new nodes with style defaults different from flexbox
  /// on web (e.g. `YGFlexDirectionColumn` and `YGPositionRelative`).
  /// `UseWebDefaults` instructs Yoga to instead use a default style consistent
  /// with the web.
  void YGConfigSetUseWebDefaults(
    YGConfigRef config,
    bool enabled,
  ) {
    return _YGConfigSetUseWebDefaults(
      config,
      enabled,
    );
  }

  late final _YGConfigSetUseWebDefaultsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGConfigRef, ffi.Bool)>>(
          'YGConfigSetUseWebDefaults');
  late final _YGConfigSetUseWebDefaults = _YGConfigSetUseWebDefaultsPtr
      .asFunction<void Function(YGConfigRef, bool)>();

  /// Whether the configuration is set to use web defaults.
  bool YGConfigGetUseWebDefaults(
    YGConfigConstRef config,
  ) {
    return _YGConfigGetUseWebDefaults(
      config,
    );
  }

  late final _YGConfigGetUseWebDefaultsPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(YGConfigConstRef)>>(
          'YGConfigGetUseWebDefaults');
  late final _YGConfigGetUseWebDefaults = _YGConfigGetUseWebDefaultsPtr
      .asFunction<bool Function(YGConfigConstRef)>();

  /// Yoga will by default round final layout positions and dimensions to the
  /// nearst point. `pointScaleFactor` controls the density of the grid used for
  /// layout rounding (e.g. to round to the closest display pixel).
  ///
  /// May be set to 0.0f to avoid rounding the layout results.
  void YGConfigSetPointScaleFactor(
    YGConfigRef config,
    double pixelsInPoint,
  ) {
    return _YGConfigSetPointScaleFactor(
      config,
      pixelsInPoint,
    );
  }

  late final _YGConfigSetPointScaleFactorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGConfigRef, ffi.Float)>>(
          'YGConfigSetPointScaleFactor');
  late final _YGConfigSetPointScaleFactor = _YGConfigSetPointScaleFactorPtr
      .asFunction<void Function(YGConfigRef, double)>();

  /// Get the currently set point scale factor.
  double YGConfigGetPointScaleFactor(
    YGConfigConstRef config,
  ) {
    return _YGConfigGetPointScaleFactor(
      config,
    );
  }

  late final _YGConfigGetPointScaleFactorPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(YGConfigConstRef)>>(
          'YGConfigGetPointScaleFactor');
  late final _YGConfigGetPointScaleFactor = _YGConfigGetPointScaleFactorPtr
      .asFunction<double Function(YGConfigConstRef)>();

  /// Configures how Yoga balances W3C conformance vs compatibility with layouts
  /// created against earlier versions of Yoga.
  ///
  /// By default Yoga will prioritize W3C conformance. `Errata` may be set to ask
  /// Yoga to produce specific incorrect behaviors. E.g. `YGConfigSetErrata(config,
  /// YGErrataStretchFlexBasis)`.
  ///
  /// YGErrata is a bitmask, and multiple errata may be set at once. Predefined
  /// constants exist for convenience:
  /// 1. YGErrataNone: No errata
  /// 2. YGErrataClassic: Match layout behaviors of Yoga 1.x
  /// 3. YGErrataAll: Match layout behaviors of Yoga 1.x, including
  /// `UseLegacyStretchBehaviour`
  void YGConfigSetErrata(
    YGConfigRef config,
    int errata,
  ) {
    return _YGConfigSetErrata(
      config,
      errata,
    );
  }

  late final _YGConfigSetErrataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGConfigRef, ffi.Int32)>>(
          'YGConfigSetErrata');
  late final _YGConfigSetErrata =
      _YGConfigSetErrataPtr.asFunction<void Function(YGConfigRef, int)>();

  /// Get the currently set errata.
  int YGConfigGetErrata(
    YGConfigConstRef config,
  ) {
    return _YGConfigGetErrata(
      config,
    );
  }

  late final _YGConfigGetErrataPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(YGConfigConstRef)>>(
          'YGConfigGetErrata');
  late final _YGConfigGetErrata =
      _YGConfigGetErrataPtr.asFunction<int Function(YGConfigConstRef)>();

  /// Set a custom log function for to use when logging diagnostics or fatal.
  /// errors.
  void YGConfigSetLogger(
    YGConfigRef config,
    YGLogger logger,
  ) {
    return _YGConfigSetLogger(
      config,
      logger,
    );
  }

  late final _YGConfigSetLoggerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGConfigRef, YGLogger)>>(
          'YGConfigSetLogger');
  late final _YGConfigSetLogger =
      _YGConfigSetLoggerPtr.asFunction<void Function(YGConfigRef, YGLogger)>();

  /// Sets an arbitrary context pointer on the config which may be read from during
  /// callbacks.
  void YGConfigSetContext(
    YGConfigRef config,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _YGConfigSetContext(
      config,
      context,
    );
  }

  late final _YGConfigSetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              YGConfigRef, ffi.Pointer<ffi.Void>)>>('YGConfigSetContext');
  late final _YGConfigSetContext = _YGConfigSetContextPtr.asFunction<
      void Function(YGConfigRef, ffi.Pointer<ffi.Void>)>();

  /// Gets the currently set context.
  ffi.Pointer<ffi.Void> YGConfigGetContext(
    YGConfigConstRef config,
  ) {
    return _YGConfigGetContext(
      config,
    );
  }

  late final _YGConfigGetContextPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(YGConfigConstRef)>>(
      'YGConfigGetContext');
  late final _YGConfigGetContext = _YGConfigGetContextPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(YGConfigConstRef)>();

  /// Enable an experimental/unsupported feature in Yoga.
  void YGConfigSetExperimentalFeatureEnabled(
    YGConfigRef config,
    int feature,
    bool enabled,
  ) {
    return _YGConfigSetExperimentalFeatureEnabled(
      config,
      feature,
      enabled,
    );
  }

  late final _YGConfigSetExperimentalFeatureEnabledPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(YGConfigRef, ffi.Int32, ffi.Bool)>>(
      'YGConfigSetExperimentalFeatureEnabled');
  late final _YGConfigSetExperimentalFeatureEnabled =
      _YGConfigSetExperimentalFeatureEnabledPtr.asFunction<
          void Function(YGConfigRef, int, bool)>();

  /// Whether an experimental feature is set.
  bool YGConfigIsExperimentalFeatureEnabled(
    YGConfigConstRef config,
    int feature,
  ) {
    return _YGConfigIsExperimentalFeatureEnabled(
      config,
      feature,
    );
  }

  late final _YGConfigIsExperimentalFeatureEnabledPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(YGConfigConstRef, ffi.Int32)>>(
      'YGConfigIsExperimentalFeatureEnabled');
  late final _YGConfigIsExperimentalFeatureEnabled =
      _YGConfigIsExperimentalFeatureEnabledPtr.asFunction<
          bool Function(YGConfigConstRef, int)>();

  /// Sets a callback, called during layout, to create a new mutable Yoga node if
  /// Yoga must write to it and its owner is not its parent observed during layout.
  void YGConfigSetCloneNodeFunc(
    YGConfigRef config,
    YGCloneNodeFunc callback,
  ) {
    return _YGConfigSetCloneNodeFunc(
      config,
      callback,
    );
  }

  late final _YGConfigSetCloneNodeFuncPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(YGConfigRef, YGCloneNodeFunc)>>(
      'YGConfigSetCloneNodeFunc');
  late final _YGConfigSetCloneNodeFunc = _YGConfigSetCloneNodeFuncPtr
      .asFunction<void Function(YGConfigRef, YGCloneNodeFunc)>();

  /// Heap allocates and returns a new Yoga node using Yoga settings.
  YGNodeRef YGNodeNew() {
    return _YGNodeNew();
  }

  late final _YGNodeNewPtr =
      _lookup<ffi.NativeFunction<YGNodeRef Function()>>('YGNodeNew');
  late final _YGNodeNew = _YGNodeNewPtr.asFunction<YGNodeRef Function()>();

  /// Heap allocates and returns a new Yoga node, with customized settings.
  YGNodeRef YGNodeNewWithConfig(
    YGConfigConstRef config,
  ) {
    return _YGNodeNewWithConfig(
      config,
    );
  }

  late final _YGNodeNewWithConfigPtr =
      _lookup<ffi.NativeFunction<YGNodeRef Function(YGConfigConstRef)>>(
          'YGNodeNewWithConfig');
  late final _YGNodeNewWithConfig = _YGNodeNewWithConfigPtr.asFunction<
      YGNodeRef Function(YGConfigConstRef)>();

  /// Returns a mutable copy of an existing node, with the same context and
  /// children, but no owner set. Does not call the function set by
  /// YGConfigSetCloneNodeFunc().
  YGNodeRef YGNodeClone(
    YGNodeConstRef node,
  ) {
    return _YGNodeClone(
      node,
    );
  }

  late final _YGNodeClonePtr =
      _lookup<ffi.NativeFunction<YGNodeRef Function(YGNodeConstRef)>>(
          'YGNodeClone');
  late final _YGNodeClone =
      _YGNodeClonePtr.asFunction<YGNodeRef Function(YGNodeConstRef)>();

  /// Frees the Yoga node, disconnecting it from its owner and children.
  void YGNodeFree(
    YGNodeRef node,
  ) {
    return _YGNodeFree(
      node,
    );
  }

  late final _YGNodeFreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>('YGNodeFree');
  late final _YGNodeFree =
      _YGNodeFreePtr.asFunction<void Function(YGNodeRef)>();

  /// Frees the subtree of Yoga nodes rooted at the given node.
  void YGNodeFreeRecursive(
    YGNodeRef node,
  ) {
    return _YGNodeFreeRecursive(
      node,
    );
  }

  late final _YGNodeFreeRecursivePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeFreeRecursive');
  late final _YGNodeFreeRecursive =
      _YGNodeFreeRecursivePtr.asFunction<void Function(YGNodeRef)>();

  /// Frees the Yoga node without disconnecting it from its owner or children.
  /// Allows garbage collecting Yoga nodes in parallel when the entire tree is
  /// unreachable.
  void YGNodeFinalize(
    YGNodeRef node,
  ) {
    return _YGNodeFinalize(
      node,
    );
  }

  late final _YGNodeFinalizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeFinalize');
  late final _YGNodeFinalize =
      _YGNodeFinalizePtr.asFunction<void Function(YGNodeRef)>();

  /// Resets the node to its default state.
  void YGNodeReset(
    YGNodeRef node,
  ) {
    return _YGNodeReset(
      node,
    );
  }

  late final _YGNodeResetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>('YGNodeReset');
  late final _YGNodeReset =
      _YGNodeResetPtr.asFunction<void Function(YGNodeRef)>();

  /// Calculates the layout of the tree rooted at the given node.
  ///
  /// Layout results may be read after calling YGNodeCalculateLayout() using
  /// functions like YGNodeLayoutGetLeft(), YGNodeLayoutGetTop(), etc.
  ///
  /// YGNodeGetHasNewLayout() may be read to know if the layout of the node or its
  /// subtrees may have changed since the last time YGNodeCalculate() was called.
  void YGNodeCalculateLayout(
    YGNodeRef node,
    double availableWidth,
    double availableHeight,
    int ownerDirection,
  ) {
    return _YGNodeCalculateLayout(
      node,
      availableWidth,
      availableHeight,
      ownerDirection,
    );
  }

  late final _YGNodeCalculateLayoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(YGNodeRef, ffi.Float, ffi.Float,
              ffi.Int32)>>('YGNodeCalculateLayout');
  late final _YGNodeCalculateLayout = _YGNodeCalculateLayoutPtr.asFunction<
      void Function(YGNodeRef, double, double, int)>();

  /// Whether the given node may have new layout results. Must be reset by calling
  /// YGNodeSetHasNewLayout().
  bool YGNodeGetHasNewLayout(
    YGNodeConstRef node,
  ) {
    return _YGNodeGetHasNewLayout(
      node,
    );
  }

  late final _YGNodeGetHasNewLayoutPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(YGNodeConstRef)>>(
          'YGNodeGetHasNewLayout');
  late final _YGNodeGetHasNewLayout =
      _YGNodeGetHasNewLayoutPtr.asFunction<bool Function(YGNodeConstRef)>();

  /// Sets whether a nodes layout is considered new.
  void YGNodeSetHasNewLayout(
    YGNodeRef node,
    bool hasNewLayout,
  ) {
    return _YGNodeSetHasNewLayout(
      node,
      hasNewLayout,
    );
  }

  late final _YGNodeSetHasNewLayoutPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Bool)>>(
          'YGNodeSetHasNewLayout');
  late final _YGNodeSetHasNewLayout =
      _YGNodeSetHasNewLayoutPtr.asFunction<void Function(YGNodeRef, bool)>();

  /// Whether the node's layout results are dirty due to it or its children
  /// changing.
  bool YGNodeIsDirty(
    YGNodeConstRef node,
  ) {
    return _YGNodeIsDirty(
      node,
    );
  }

  late final _YGNodeIsDirtyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(YGNodeConstRef)>>(
          'YGNodeIsDirty');
  late final _YGNodeIsDirty =
      _YGNodeIsDirtyPtr.asFunction<bool Function(YGNodeConstRef)>();

  /// Marks a node with custom measure function as dirty.
  void YGNodeMarkDirty(
    YGNodeRef node,
  ) {
    return _YGNodeMarkDirty(
      node,
    );
  }

  late final _YGNodeMarkDirtyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeMarkDirty');
  late final _YGNodeMarkDirty =
      _YGNodeMarkDirtyPtr.asFunction<void Function(YGNodeRef)>();

  /// Called when a change is made to the Yoga tree which dirties this node.
  void YGNodeSetDirtiedFunc(
    YGNodeRef node,
    YGDirtiedFunc dirtiedFunc,
  ) {
    return _YGNodeSetDirtiedFunc(
      node,
      dirtiedFunc,
    );
  }

  late final _YGNodeSetDirtiedFuncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, YGDirtiedFunc)>>(
          'YGNodeSetDirtiedFunc');
  late final _YGNodeSetDirtiedFunc = _YGNodeSetDirtiedFuncPtr.asFunction<
      void Function(YGNodeRef, YGDirtiedFunc)>();

  /// Returns a dirtied func if set.
  YGDirtiedFunc YGNodeGetDirtiedFunc(
    YGNodeConstRef node,
  ) {
    return _YGNodeGetDirtiedFunc(
      node,
    );
  }

  late final _YGNodeGetDirtiedFuncPtr =
      _lookup<ffi.NativeFunction<YGDirtiedFunc Function(YGNodeConstRef)>>(
          'YGNodeGetDirtiedFunc');
  late final _YGNodeGetDirtiedFunc = _YGNodeGetDirtiedFuncPtr.asFunction<
      YGDirtiedFunc Function(YGNodeConstRef)>();

  /// Inserts a child node at the given index.
  void YGNodeInsertChild(
    YGNodeRef node,
    YGNodeRef child,
    int index,
  ) {
    return _YGNodeInsertChild(
      node,
      child,
      index,
    );
  }

  late final _YGNodeInsertChildPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(YGNodeRef, YGNodeRef, ffi.Size)>>(
      'YGNodeInsertChild');
  late final _YGNodeInsertChild = _YGNodeInsertChildPtr.asFunction<
      void Function(YGNodeRef, YGNodeRef, int)>();

  /// Replaces the child node at a given index with a new one.
  void YGNodeSwapChild(
    YGNodeRef node,
    YGNodeRef child,
    int index,
  ) {
    return _YGNodeSwapChild(
      node,
      child,
      index,
    );
  }

  late final _YGNodeSwapChildPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(YGNodeRef, YGNodeRef, ffi.Size)>>(
      'YGNodeSwapChild');
  late final _YGNodeSwapChild = _YGNodeSwapChildPtr.asFunction<
      void Function(YGNodeRef, YGNodeRef, int)>();

  /// Removes the given child node.
  void YGNodeRemoveChild(
    YGNodeRef node,
    YGNodeRef child,
  ) {
    return _YGNodeRemoveChild(
      node,
      child,
    );
  }

  late final _YGNodeRemoveChildPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, YGNodeRef)>>(
          'YGNodeRemoveChild');
  late final _YGNodeRemoveChild =
      _YGNodeRemoveChildPtr.asFunction<void Function(YGNodeRef, YGNodeRef)>();

  /// Removes all children nodes.
  void YGNodeRemoveAllChildren(
    YGNodeRef node,
  ) {
    return _YGNodeRemoveAllChildren(
      node,
    );
  }

  late final _YGNodeRemoveAllChildrenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeRemoveAllChildren');
  late final _YGNodeRemoveAllChildren =
      _YGNodeRemoveAllChildrenPtr.asFunction<void Function(YGNodeRef)>();

  /// Sets children according to the given list of nodes.
  void YGNodeSetChildren(
    YGNodeRef owner,
    ffi.Pointer<YGNodeRef> children,
    int count,
  ) {
    return _YGNodeSetChildren(
      owner,
      children,
      count,
    );
  }

  late final _YGNodeSetChildrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(YGNodeRef, ffi.Pointer<YGNodeRef>,
              ffi.Size)>>('YGNodeSetChildren');
  late final _YGNodeSetChildren = _YGNodeSetChildrenPtr.asFunction<
      void Function(YGNodeRef, ffi.Pointer<YGNodeRef>, int)>();

  /// Get the child node at a given index.
  YGNodeRef YGNodeGetChild(
    YGNodeRef node,
    int index,
  ) {
    return _YGNodeGetChild(
      node,
      index,
    );
  }

  late final _YGNodeGetChildPtr =
      _lookup<ffi.NativeFunction<YGNodeRef Function(YGNodeRef, ffi.Size)>>(
          'YGNodeGetChild');
  late final _YGNodeGetChild =
      _YGNodeGetChildPtr.asFunction<YGNodeRef Function(YGNodeRef, int)>();

  /// The number of child nodes.
  int YGNodeGetChildCount(
    YGNodeConstRef node,
  ) {
    return _YGNodeGetChildCount(
      node,
    );
  }

  late final _YGNodeGetChildCountPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(YGNodeConstRef)>>(
          'YGNodeGetChildCount');
  late final _YGNodeGetChildCount =
      _YGNodeGetChildCountPtr.asFunction<int Function(YGNodeConstRef)>();

  /// Get the parent/owner currently set for a node.
  YGNodeRef YGNodeGetOwner(
    YGNodeRef node,
  ) {
    return _YGNodeGetOwner(
      node,
    );
  }

  late final _YGNodeGetOwnerPtr =
      _lookup<ffi.NativeFunction<YGNodeRef Function(YGNodeRef)>>(
          'YGNodeGetOwner');
  late final _YGNodeGetOwner =
      _YGNodeGetOwnerPtr.asFunction<YGNodeRef Function(YGNodeRef)>();

  /// Get the parent/owner currently set for a node.
  YGNodeRef YGNodeGetParent(
    YGNodeRef node,
  ) {
    return _YGNodeGetParent(
      node,
    );
  }

  late final _YGNodeGetParentPtr =
      _lookup<ffi.NativeFunction<YGNodeRef Function(YGNodeRef)>>(
          'YGNodeGetParent');
  late final _YGNodeGetParent =
      _YGNodeGetParentPtr.asFunction<YGNodeRef Function(YGNodeRef)>();

  /// Set a new config for the node after creation.
  void YGNodeSetConfig(
    YGNodeRef node,
    YGConfigRef config,
  ) {
    return _YGNodeSetConfig(
      node,
      config,
    );
  }

  late final _YGNodeSetConfigPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, YGConfigRef)>>(
          'YGNodeSetConfig');
  late final _YGNodeSetConfig =
      _YGNodeSetConfigPtr.asFunction<void Function(YGNodeRef, YGConfigRef)>();

  /// Get the config currently set on the node.
  YGConfigConstRef YGNodeGetConfig(
    YGNodeRef node,
  ) {
    return _YGNodeGetConfig(
      node,
    );
  }

  late final _YGNodeGetConfigPtr =
      _lookup<ffi.NativeFunction<YGConfigConstRef Function(YGNodeRef)>>(
          'YGNodeGetConfig');
  late final _YGNodeGetConfig =
      _YGNodeGetConfigPtr.asFunction<YGConfigConstRef Function(YGNodeRef)>();

  /// Sets extra data on the Yoga node which may be read from during callbacks.
  void YGNodeSetContext(
    YGNodeRef node,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _YGNodeSetContext(
      node,
      context,
    );
  }

  late final _YGNodeSetContextPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(YGNodeRef, ffi.Pointer<ffi.Void>)>>(
      'YGNodeSetContext');
  late final _YGNodeSetContext = _YGNodeSetContextPtr.asFunction<
      void Function(YGNodeRef, ffi.Pointer<ffi.Void>)>();

  /// Returns the context or NULL if no context has been set.
  ffi.Pointer<ffi.Void> YGNodeGetContext(
    YGNodeConstRef node,
  ) {
    return _YGNodeGetContext(
      node,
    );
  }

  late final _YGNodeGetContextPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(YGNodeConstRef)>>(
      'YGNodeGetContext');
  late final _YGNodeGetContext = _YGNodeGetContextPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(YGNodeConstRef)>();

  /// Allows providing custom measurements for a Yoga leaf node (usually for
  /// measuring text). YGNodeMarkDirty() must be set if content effecting the
  /// measurements of the node changes.
  void YGNodeSetMeasureFunc(
    YGNodeRef node,
    YGMeasureFunc measureFunc,
  ) {
    return _YGNodeSetMeasureFunc(
      node,
      measureFunc,
    );
  }

  late final _YGNodeSetMeasureFuncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, YGMeasureFunc)>>(
          'YGNodeSetMeasureFunc');
  late final _YGNodeSetMeasureFunc = _YGNodeSetMeasureFuncPtr.asFunction<
      void Function(YGNodeRef, YGMeasureFunc)>();

  /// Whether a measure function is set.
  bool YGNodeHasMeasureFunc(
    YGNodeConstRef node,
  ) {
    return _YGNodeHasMeasureFunc(
      node,
    );
  }

  late final _YGNodeHasMeasureFuncPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(YGNodeConstRef)>>(
          'YGNodeHasMeasureFunc');
  late final _YGNodeHasMeasureFunc =
      _YGNodeHasMeasureFuncPtr.asFunction<bool Function(YGNodeConstRef)>();

  /// Set a custom function for determining the text baseline for use in baseline
  /// alignment.
  void YGNodeSetBaselineFunc(
    YGNodeRef node,
    YGBaselineFunc baselineFunc,
  ) {
    return _YGNodeSetBaselineFunc(
      node,
      baselineFunc,
    );
  }

  late final _YGNodeSetBaselineFuncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, YGBaselineFunc)>>(
          'YGNodeSetBaselineFunc');
  late final _YGNodeSetBaselineFunc = _YGNodeSetBaselineFuncPtr.asFunction<
      void Function(YGNodeRef, YGBaselineFunc)>();

  /// Whether a baseline function is set.
  bool YGNodeHasBaselineFunc(
    YGNodeConstRef node,
  ) {
    return _YGNodeHasBaselineFunc(
      node,
    );
  }

  late final _YGNodeHasBaselineFuncPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(YGNodeConstRef)>>(
          'YGNodeHasBaselineFunc');
  late final _YGNodeHasBaselineFunc =
      _YGNodeHasBaselineFuncPtr.asFunction<bool Function(YGNodeConstRef)>();

  /// Sets this node should be considered the reference baseline among siblings.
  void YGNodeSetIsReferenceBaseline(
    YGNodeRef node,
    bool isReferenceBaseline,
  ) {
    return _YGNodeSetIsReferenceBaseline(
      node,
      isReferenceBaseline,
    );
  }

  late final _YGNodeSetIsReferenceBaselinePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Bool)>>(
          'YGNodeSetIsReferenceBaseline');
  late final _YGNodeSetIsReferenceBaseline = _YGNodeSetIsReferenceBaselinePtr
      .asFunction<void Function(YGNodeRef, bool)>();

  /// Whether this node is set as the reference baseline.
  bool YGNodeIsReferenceBaseline(
    YGNodeConstRef node,
  ) {
    return _YGNodeIsReferenceBaseline(
      node,
    );
  }

  late final _YGNodeIsReferenceBaselinePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(YGNodeConstRef)>>(
          'YGNodeIsReferenceBaseline');
  late final _YGNodeIsReferenceBaseline =
      _YGNodeIsReferenceBaselinePtr.asFunction<bool Function(YGNodeConstRef)>();

  /// Sets whether a leaf node's layout results may be truncated during layout
  /// rounding.
  void YGNodeSetNodeType(
    YGNodeRef node,
    int nodeType,
  ) {
    return _YGNodeSetNodeType(
      node,
      nodeType,
    );
  }

  late final _YGNodeSetNodeTypePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Int32)>>(
          'YGNodeSetNodeType');
  late final _YGNodeSetNodeType =
      _YGNodeSetNodeTypePtr.asFunction<void Function(YGNodeRef, int)>();

  /// Wwhether a leaf node's layout results may be truncated during layout
  /// rounding.
  int YGNodeGetNodeType(
    YGNodeConstRef node,
  ) {
    return _YGNodeGetNodeType(
      node,
    );
  }

  late final _YGNodeGetNodeTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(YGNodeConstRef)>>(
          'YGNodeGetNodeType');
  late final _YGNodeGetNodeType =
      _YGNodeGetNodeTypePtr.asFunction<int Function(YGNodeConstRef)>();

  /// Make it so that this node will always form a containing block for any
  /// descendant nodes. This is useful for when a node has a property outside of
  /// of Yoga that will form a containing block. For example, transforms or some of
  /// the others listed in
  /// https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block
  void YGNodeSetAlwaysFormsContainingBlock(
    YGNodeRef node,
    bool alwaysFormsContainingBlock,
  ) {
    return _YGNodeSetAlwaysFormsContainingBlock(
      node,
      alwaysFormsContainingBlock,
    );
  }

  late final _YGNodeSetAlwaysFormsContainingBlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Bool)>>(
          'YGNodeSetAlwaysFormsContainingBlock');
  late final _YGNodeSetAlwaysFormsContainingBlock =
      _YGNodeSetAlwaysFormsContainingBlockPtr.asFunction<
          void Function(YGNodeRef, bool)>();

  /// Whether the node will always form a containing block for any descendant. This
  /// can happen in situation where the client implements something like a
  /// transform that can affect containing blocks but is not handled by Yoga
  /// directly.
  bool YGNodeGetAlwaysFormsContainingBlock(
    YGNodeConstRef node,
  ) {
    return _YGNodeGetAlwaysFormsContainingBlock(
      node,
    );
  }

  late final _YGNodeGetAlwaysFormsContainingBlockPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(YGNodeConstRef)>>(
          'YGNodeGetAlwaysFormsContainingBlock');
  late final _YGNodeGetAlwaysFormsContainingBlock =
      _YGNodeGetAlwaysFormsContainingBlockPtr.asFunction<
          bool Function(YGNodeConstRef)>();

  /// @deprecated
  bool YGNodeCanUseCachedMeasurement(
    int widthMode,
    double availableWidth,
    int heightMode,
    double availableHeight,
    int lastWidthMode,
    double lastAvailableWidth,
    int lastHeightMode,
    double lastAvailableHeight,
    double lastComputedWidth,
    double lastComputedHeight,
    double marginRow,
    double marginColumn,
    YGConfigRef config,
  ) {
    return _YGNodeCanUseCachedMeasurement(
      widthMode,
      availableWidth,
      heightMode,
      availableHeight,
      lastWidthMode,
      lastAvailableWidth,
      lastHeightMode,
      lastAvailableHeight,
      lastComputedWidth,
      lastComputedHeight,
      marginRow,
      marginColumn,
      config,
    );
  }

  late final _YGNodeCanUseCachedMeasurementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Int32,
              ffi.Float,
              ffi.Int32,
              ffi.Float,
              ffi.Int32,
              ffi.Float,
              ffi.Int32,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              YGConfigRef)>>('YGNodeCanUseCachedMeasurement');
  late final _YGNodeCanUseCachedMeasurement =
      _YGNodeCanUseCachedMeasurementPtr.asFunction<
          bool Function(int, double, int, double, int, double, int, double,
              double, double, double, double, YGConfigRef)>();

  int __math_errhandling() {
    return ___math_errhandling();
  }

  late final ___math_errhandlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__math_errhandling');
  late final ___math_errhandling =
      ___math_errhandlingPtr.asFunction<int Function()>();

  int __fpclassifyf(
    double arg0,
  ) {
    return ___fpclassifyf(
      arg0,
    );
  }

  late final ___fpclassifyfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('__fpclassifyf');
  late final ___fpclassifyf =
      ___fpclassifyfPtr.asFunction<int Function(double)>();

  int __fpclassifyd(
    double arg0,
  ) {
    return ___fpclassifyd(
      arg0,
    );
  }

  late final ___fpclassifydPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>(
          '__fpclassifyd');
  late final ___fpclassifyd =
      ___fpclassifydPtr.asFunction<int Function(double)>();

  /// *
  /// Math Functions                                *
  /// *
  double acosf(
    double arg0,
  ) {
    return _acosf(
      arg0,
    );
  }

  late final _acosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acosf');
  late final _acosf = _acosfPtr.asFunction<double Function(double)>();

  double acos(
    double arg0,
  ) {
    return _acos(
      arg0,
    );
  }

  late final _acosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acos');
  late final _acos = _acosPtr.asFunction<double Function(double)>();

  double asinf(
    double arg0,
  ) {
    return _asinf(
      arg0,
    );
  }

  late final _asinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinf');
  late final _asinf = _asinfPtr.asFunction<double Function(double)>();

  double asin(
    double arg0,
  ) {
    return _asin(
      arg0,
    );
  }

  late final _asinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asin');
  late final _asin = _asinPtr.asFunction<double Function(double)>();

  double atanf(
    double arg0,
  ) {
    return _atanf(
      arg0,
    );
  }

  late final _atanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanf');
  late final _atanf = _atanfPtr.asFunction<double Function(double)>();

  double atan(
    double arg0,
  ) {
    return _atan(
      arg0,
    );
  }

  late final _atanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atan');
  late final _atan = _atanPtr.asFunction<double Function(double)>();

  double atan2f(
    double arg0,
    double arg1,
  ) {
    return _atan2f(
      arg0,
      arg1,
    );
  }

  late final _atan2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'atan2f');
  late final _atan2f = _atan2fPtr.asFunction<double Function(double, double)>();

  double atan2(
    double arg0,
    double arg1,
  ) {
    return _atan2(
      arg0,
      arg1,
    );
  }

  late final _atan2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'atan2');
  late final _atan2 = _atan2Ptr.asFunction<double Function(double, double)>();

  double cosf(
    double arg0,
  ) {
    return _cosf(
      arg0,
    );
  }

  late final _cosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cosf');
  late final _cosf = _cosfPtr.asFunction<double Function(double)>();

  double cos(
    double arg0,
  ) {
    return _cos(
      arg0,
    );
  }

  late final _cosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cos');
  late final _cos = _cosPtr.asFunction<double Function(double)>();

  double sinf(
    double arg0,
  ) {
    return _sinf(
      arg0,
    );
  }

  late final _sinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinf');
  late final _sinf = _sinfPtr.asFunction<double Function(double)>();

  double sin(
    double arg0,
  ) {
    return _sin(
      arg0,
    );
  }

  late final _sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sin');
  late final _sin = _sinPtr.asFunction<double Function(double)>();

  double tanf(
    double arg0,
  ) {
    return _tanf(
      arg0,
    );
  }

  late final _tanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanf');
  late final _tanf = _tanfPtr.asFunction<double Function(double)>();

  double tan(
    double arg0,
  ) {
    return _tan(
      arg0,
    );
  }

  late final _tanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tan');
  late final _tan = _tanPtr.asFunction<double Function(double)>();

  double acoshf(
    double arg0,
  ) {
    return _acoshf(
      arg0,
    );
  }

  late final _acoshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acoshf');
  late final _acoshf = _acoshfPtr.asFunction<double Function(double)>();

  double acosh(
    double arg0,
  ) {
    return _acosh(
      arg0,
    );
  }

  late final _acoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acosh');
  late final _acosh = _acoshPtr.asFunction<double Function(double)>();

  double asinhf(
    double arg0,
  ) {
    return _asinhf(
      arg0,
    );
  }

  late final _asinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinhf');
  late final _asinhf = _asinhfPtr.asFunction<double Function(double)>();

  double asinh(
    double arg0,
  ) {
    return _asinh(
      arg0,
    );
  }

  late final _asinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asinh');
  late final _asinh = _asinhPtr.asFunction<double Function(double)>();

  double atanhf(
    double arg0,
  ) {
    return _atanhf(
      arg0,
    );
  }

  late final _atanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanhf');
  late final _atanhf = _atanhfPtr.asFunction<double Function(double)>();

  double atanh(
    double arg0,
  ) {
    return _atanh(
      arg0,
    );
  }

  late final _atanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atanh');
  late final _atanh = _atanhPtr.asFunction<double Function(double)>();

  double coshf(
    double arg0,
  ) {
    return _coshf(
      arg0,
    );
  }

  late final _coshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('coshf');
  late final _coshf = _coshfPtr.asFunction<double Function(double)>();

  double cosh(
    double arg0,
  ) {
    return _cosh(
      arg0,
    );
  }

  late final _coshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cosh');
  late final _cosh = _coshPtr.asFunction<double Function(double)>();

  double sinhf(
    double arg0,
  ) {
    return _sinhf(
      arg0,
    );
  }

  late final _sinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinhf');
  late final _sinhf = _sinhfPtr.asFunction<double Function(double)>();

  double sinh(
    double arg0,
  ) {
    return _sinh(
      arg0,
    );
  }

  late final _sinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sinh');
  late final _sinh = _sinhPtr.asFunction<double Function(double)>();

  double tanhf(
    double arg0,
  ) {
    return _tanhf(
      arg0,
    );
  }

  late final _tanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanhf');
  late final _tanhf = _tanhfPtr.asFunction<double Function(double)>();

  double tanh(
    double arg0,
  ) {
    return _tanh(
      arg0,
    );
  }

  late final _tanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tanh');
  late final _tanh = _tanhPtr.asFunction<double Function(double)>();

  double expf(
    double arg0,
  ) {
    return _expf(
      arg0,
    );
  }

  late final _expfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expf');
  late final _expf = _expfPtr.asFunction<double Function(double)>();

  double exp(
    double arg0,
  ) {
    return _exp(
      arg0,
    );
  }

  late final _expPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp');
  late final _exp = _expPtr.asFunction<double Function(double)>();

  double exp2f(
    double arg0,
  ) {
    return _exp2f(
      arg0,
    );
  }

  late final _exp2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('exp2f');
  late final _exp2f = _exp2fPtr.asFunction<double Function(double)>();

  double exp2(
    double arg0,
  ) {
    return _exp2(
      arg0,
    );
  }

  late final _exp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp2');
  late final _exp2 = _exp2Ptr.asFunction<double Function(double)>();

  double expm1f(
    double arg0,
  ) {
    return _expm1f(
      arg0,
    );
  }

  late final _expm1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expm1f');
  late final _expm1f = _expm1fPtr.asFunction<double Function(double)>();

  double expm1(
    double arg0,
  ) {
    return _expm1(
      arg0,
    );
  }

  late final _expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('expm1');
  late final _expm1 = _expm1Ptr.asFunction<double Function(double)>();

  double logf(
    double arg0,
  ) {
    return _logf(
      arg0,
    );
  }

  late final _logfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logf');
  late final _logf = _logfPtr.asFunction<double Function(double)>();

  double log(
    double arg0,
  ) {
    return _log(
      arg0,
    );
  }

  late final _logPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log');
  late final _log = _logPtr.asFunction<double Function(double)>();

  double log10f(
    double arg0,
  ) {
    return _log10f(
      arg0,
    );
  }

  late final _log10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log10f');
  late final _log10f = _log10fPtr.asFunction<double Function(double)>();

  double log10(
    double arg0,
  ) {
    return _log10(
      arg0,
    );
  }

  late final _log10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log10');
  late final _log10 = _log10Ptr.asFunction<double Function(double)>();

  double log2f(
    double arg0,
  ) {
    return _log2f(
      arg0,
    );
  }

  late final _log2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log2f');
  late final _log2f = _log2fPtr.asFunction<double Function(double)>();

  double log2(
    double arg0,
  ) {
    return _log2(
      arg0,
    );
  }

  late final _log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log2');
  late final _log2 = _log2Ptr.asFunction<double Function(double)>();

  double log1pf(
    double arg0,
  ) {
    return _log1pf(
      arg0,
    );
  }

  late final _log1pfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log1pf');
  late final _log1pf = _log1pfPtr.asFunction<double Function(double)>();

  double log1p(
    double arg0,
  ) {
    return _log1p(
      arg0,
    );
  }

  late final _log1pPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log1p');
  late final _log1p = _log1pPtr.asFunction<double Function(double)>();

  double logbf(
    double arg0,
  ) {
    return _logbf(
      arg0,
    );
  }

  late final _logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logbf');
  late final _logbf = _logbfPtr.asFunction<double Function(double)>();

  double logb(
    double arg0,
  ) {
    return _logb(
      arg0,
    );
  }

  late final _logbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('logb');
  late final _logb = _logbPtr.asFunction<double Function(double)>();

  double modff(
    double arg0,
    ffi.Pointer<ffi.Float> arg1,
  ) {
    return _modff(
      arg0,
      arg1,
    );
  }

  late final _modffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>>('modff');
  late final _modff =
      _modffPtr.asFunction<double Function(double, ffi.Pointer<ffi.Float>)>();

  double modf(
    double arg0,
    ffi.Pointer<ffi.Double> arg1,
  ) {
    return _modf(
      arg0,
      arg1,
    );
  }

  late final _modfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>>('modf');
  late final _modf =
      _modfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Double>)>();

  double ldexpf(
    double arg0,
    int arg1,
  ) {
    return _ldexpf(
      arg0,
      arg1,
    );
  }

  late final _ldexpfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          'ldexpf');
  late final _ldexpf = _ldexpfPtr.asFunction<double Function(double, int)>();

  double ldexp(
    double arg0,
    int arg1,
  ) {
    return _ldexp(
      arg0,
      arg1,
    );
  }

  late final _ldexpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'ldexp');
  late final _ldexp = _ldexpPtr.asFunction<double Function(double, int)>();

  double frexpf(
    double arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _frexpf(
      arg0,
      arg1,
    );
  }

  late final _frexpfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int>)>>('frexpf');
  late final _frexpf =
      _frexpfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double frexp(
    double arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _frexp(
      arg0,
      arg1,
    );
  }

  late final _frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>('frexp');
  late final _frexp =
      _frexpPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  int ilogbf(
    double arg0,
  ) {
    return _ilogbf(
      arg0,
    );
  }

  late final _ilogbfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('ilogbf');
  late final _ilogbf = _ilogbfPtr.asFunction<int Function(double)>();

  int ilogb(
    double arg0,
  ) {
    return _ilogb(
      arg0,
    );
  }

  late final _ilogbPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('ilogb');
  late final _ilogb = _ilogbPtr.asFunction<int Function(double)>();

  double scalbnf(
    double arg0,
    int arg1,
  ) {
    return _scalbnf(
      arg0,
      arg1,
    );
  }

  late final _scalbnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          'scalbnf');
  late final _scalbnf = _scalbnfPtr.asFunction<double Function(double, int)>();

  double scalbn(
    double arg0,
    int arg1,
  ) {
    return _scalbn(
      arg0,
      arg1,
    );
  }

  late final _scalbnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'scalbn');
  late final _scalbn = _scalbnPtr.asFunction<double Function(double, int)>();

  double scalblnf(
    double arg0,
    int arg1,
  ) {
    return _scalblnf(
      arg0,
      arg1,
    );
  }

  late final _scalblnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Long)>>(
          'scalblnf');
  late final _scalblnf =
      _scalblnfPtr.asFunction<double Function(double, int)>();

  double scalbln(
    double arg0,
    int arg1,
  ) {
    return _scalbln(
      arg0,
      arg1,
    );
  }

  late final _scalblnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Long)>>(
          'scalbln');
  late final _scalbln = _scalblnPtr.asFunction<double Function(double, int)>();

  double fabsf(
    double arg0,
  ) {
    return _fabsf(
      arg0,
    );
  }

  late final _fabsfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('fabsf');
  late final _fabsf = _fabsfPtr.asFunction<double Function(double)>();

  double fabs(
    double arg0,
  ) {
    return _fabs(
      arg0,
    );
  }

  late final _fabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('fabs');
  late final _fabs = _fabsPtr.asFunction<double Function(double)>();

  double cbrtf(
    double arg0,
  ) {
    return _cbrtf(
      arg0,
    );
  }

  late final _cbrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cbrtf');
  late final _cbrtf = _cbrtfPtr.asFunction<double Function(double)>();

  double cbrt(
    double arg0,
  ) {
    return _cbrt(
      arg0,
    );
  }

  late final _cbrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cbrt');
  late final _cbrt = _cbrtPtr.asFunction<double Function(double)>();

  double hypotf(
    double arg0,
    double arg1,
  ) {
    return _hypotf(
      arg0,
      arg1,
    );
  }

  late final _hypotfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'hypotf');
  late final _hypotf = _hypotfPtr.asFunction<double Function(double, double)>();

  double hypot(
    double arg0,
    double arg1,
  ) {
    return _hypot(
      arg0,
      arg1,
    );
  }

  late final _hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'hypot');
  late final _hypot = _hypotPtr.asFunction<double Function(double, double)>();

  double powf(
    double arg0,
    double arg1,
  ) {
    return _powf(
      arg0,
      arg1,
    );
  }

  late final _powfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'powf');
  late final _powf = _powfPtr.asFunction<double Function(double, double)>();

  double pow(
    double arg0,
    double arg1,
  ) {
    return _pow(
      arg0,
      arg1,
    );
  }

  late final _powPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'pow');
  late final _pow = _powPtr.asFunction<double Function(double, double)>();

  double sqrtf(
    double arg0,
  ) {
    return _sqrtf(
      arg0,
    );
  }

  late final _sqrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sqrtf');
  late final _sqrtf = _sqrtfPtr.asFunction<double Function(double)>();

  double sqrt(
    double arg0,
  ) {
    return _sqrt(
      arg0,
    );
  }

  late final _sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sqrt');
  late final _sqrt = _sqrtPtr.asFunction<double Function(double)>();

  double erff(
    double arg0,
  ) {
    return _erff(
      arg0,
    );
  }

  late final _erffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erff');
  late final _erff = _erffPtr.asFunction<double Function(double)>();

  double erf(
    double arg0,
  ) {
    return _erf(
      arg0,
    );
  }

  late final _erfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erf');
  late final _erf = _erfPtr.asFunction<double Function(double)>();

  double erfcf(
    double arg0,
  ) {
    return _erfcf(
      arg0,
    );
  }

  late final _erfcfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erfcf');
  late final _erfcf = _erfcfPtr.asFunction<double Function(double)>();

  double erfc(
    double arg0,
  ) {
    return _erfc(
      arg0,
    );
  }

  late final _erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erfc');
  late final _erfc = _erfcPtr.asFunction<double Function(double)>();

  double lgammaf(
    double arg0,
  ) {
    return _lgammaf(
      arg0,
    );
  }

  late final _lgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('lgammaf');
  late final _lgammaf = _lgammafPtr.asFunction<double Function(double)>();

  double lgamma(
    double arg0,
  ) {
    return _lgamma(
      arg0,
    );
  }

  late final _lgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('lgamma');
  late final _lgamma = _lgammaPtr.asFunction<double Function(double)>();

  double tgammaf(
    double arg0,
  ) {
    return _tgammaf(
      arg0,
    );
  }

  late final _tgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tgammaf');
  late final _tgammaf = _tgammafPtr.asFunction<double Function(double)>();

  double tgamma(
    double arg0,
  ) {
    return _tgamma(
      arg0,
    );
  }

  late final _tgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tgamma');
  late final _tgamma = _tgammaPtr.asFunction<double Function(double)>();

  double ceilf(
    double arg0,
  ) {
    return _ceilf(
      arg0,
    );
  }

  late final _ceilfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('ceilf');
  late final _ceilf = _ceilfPtr.asFunction<double Function(double)>();

  double ceil(
    double arg0,
  ) {
    return _ceil(
      arg0,
    );
  }

  late final _ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('ceil');
  late final _ceil = _ceilPtr.asFunction<double Function(double)>();

  double floorf(
    double arg0,
  ) {
    return _floorf(
      arg0,
    );
  }

  late final _floorfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('floorf');
  late final _floorf = _floorfPtr.asFunction<double Function(double)>();

  double floor(
    double arg0,
  ) {
    return _floor(
      arg0,
    );
  }

  late final _floorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('floor');
  late final _floor = _floorPtr.asFunction<double Function(double)>();

  double nearbyintf(
    double arg0,
  ) {
    return _nearbyintf(
      arg0,
    );
  }

  late final _nearbyintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('nearbyintf');
  late final _nearbyintf = _nearbyintfPtr.asFunction<double Function(double)>();

  double nearbyint(
    double arg0,
  ) {
    return _nearbyint(
      arg0,
    );
  }

  late final _nearbyintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('nearbyint');
  late final _nearbyint = _nearbyintPtr.asFunction<double Function(double)>();

  double rintf(
    double arg0,
  ) {
    return _rintf(
      arg0,
    );
  }

  late final _rintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('rintf');
  late final _rintf = _rintfPtr.asFunction<double Function(double)>();

  double rint(
    double arg0,
  ) {
    return _rint(
      arg0,
    );
  }

  late final _rintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('rint');
  late final _rint = _rintPtr.asFunction<double Function(double)>();

  int lrintf(
    double arg0,
  ) {
    return _lrintf(
      arg0,
    );
  }

  late final _lrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lrintf');
  late final _lrintf = _lrintfPtr.asFunction<int Function(double)>();

  int lrint(
    double arg0,
  ) {
    return _lrint(
      arg0,
    );
  }

  late final _lrintPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lrint');
  late final _lrint = _lrintPtr.asFunction<int Function(double)>();

  double roundf(
    double arg0,
  ) {
    return _roundf(
      arg0,
    );
  }

  late final _roundfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('roundf');
  late final _roundf = _roundfPtr.asFunction<double Function(double)>();

  double round(
    double arg0,
  ) {
    return _round(
      arg0,
    );
  }

  late final _roundPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('round');
  late final _round = _roundPtr.asFunction<double Function(double)>();

  int lroundf(
    double arg0,
  ) {
    return _lroundf(
      arg0,
    );
  }

  late final _lroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lroundf');
  late final _lroundf = _lroundfPtr.asFunction<int Function(double)>();

  int lround(
    double arg0,
  ) {
    return _lround(
      arg0,
    );
  }

  late final _lroundPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lround');
  late final _lround = _lroundPtr.asFunction<int Function(double)>();

  int llrintf(
    double arg0,
  ) {
    return _llrintf(
      arg0,
    );
  }

  late final _llrintfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llrintf');
  late final _llrintf = _llrintfPtr.asFunction<int Function(double)>();

  int llrint(
    double arg0,
  ) {
    return _llrint(
      arg0,
    );
  }

  late final _llrintPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llrint');
  late final _llrint = _llrintPtr.asFunction<int Function(double)>();

  int llroundf(
    double arg0,
  ) {
    return _llroundf(
      arg0,
    );
  }

  late final _llroundfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llroundf');
  late final _llroundf = _llroundfPtr.asFunction<int Function(double)>();

  int llround(
    double arg0,
  ) {
    return _llround(
      arg0,
    );
  }

  late final _llroundPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llround');
  late final _llround = _llroundPtr.asFunction<int Function(double)>();

  double truncf(
    double arg0,
  ) {
    return _truncf(
      arg0,
    );
  }

  late final _truncfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('truncf');
  late final _truncf = _truncfPtr.asFunction<double Function(double)>();

  double trunc(
    double arg0,
  ) {
    return _trunc(
      arg0,
    );
  }

  late final _truncPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('trunc');
  late final _trunc = _truncPtr.asFunction<double Function(double)>();

  double fmodf(
    double arg0,
    double arg1,
  ) {
    return _fmodf(
      arg0,
      arg1,
    );
  }

  late final _fmodfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmodf');
  late final _fmodf = _fmodfPtr.asFunction<double Function(double, double)>();

  double fmod(
    double arg0,
    double arg1,
  ) {
    return _fmod(
      arg0,
      arg1,
    );
  }

  late final _fmodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmod');
  late final _fmod = _fmodPtr.asFunction<double Function(double, double)>();

  double remainderf(
    double arg0,
    double arg1,
  ) {
    return _remainderf(
      arg0,
      arg1,
    );
  }

  late final _remainderfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'remainderf');
  late final _remainderf =
      _remainderfPtr.asFunction<double Function(double, double)>();

  double remainder(
    double arg0,
    double arg1,
  ) {
    return _remainder(
      arg0,
      arg1,
    );
  }

  late final _remainderPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'remainder');
  late final _remainder =
      _remainderPtr.asFunction<double Function(double, double)>();

  double remquof(
    double arg0,
    double arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _remquof(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _remquofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Float, ffi.Pointer<ffi.Int>)>>('remquof');
  late final _remquof = _remquofPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double remquo(
    double arg0,
    double arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _remquo(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _remquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Int>)>>('remquo');
  late final _remquo = _remquoPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double copysignf(
    double arg0,
    double arg1,
  ) {
    return _copysignf(
      arg0,
      arg1,
    );
  }

  late final _copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'copysignf');
  late final _copysignf =
      _copysignfPtr.asFunction<double Function(double, double)>();

  double copysign(
    double arg0,
    double arg1,
  ) {
    return _copysign(
      arg0,
      arg1,
    );
  }

  late final _copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'copysign');
  late final _copysign =
      _copysignPtr.asFunction<double Function(double, double)>();

  double nanf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _nanf(
      arg0,
    );
  }

  late final _nanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Char>)>>(
          'nanf');
  late final _nanf =
      _nanfPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double nan(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _nan(
      arg0,
    );
  }

  late final _nanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'nan');
  late final _nan =
      _nanPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double nextafterf(
    double arg0,
    double arg1,
  ) {
    return _nextafterf(
      arg0,
      arg1,
    );
  }

  late final _nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'nextafterf');
  late final _nextafterf =
      _nextafterfPtr.asFunction<double Function(double, double)>();

  double nextafter(
    double arg0,
    double arg1,
  ) {
    return _nextafter(
      arg0,
      arg1,
    );
  }

  late final _nextafterPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'nextafter');
  late final _nextafter =
      _nextafterPtr.asFunction<double Function(double, double)>();

  double fdimf(
    double arg0,
    double arg1,
  ) {
    return _fdimf(
      arg0,
      arg1,
    );
  }

  late final _fdimfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fdimf');
  late final _fdimf = _fdimfPtr.asFunction<double Function(double, double)>();

  double fdim(
    double arg0,
    double arg1,
  ) {
    return _fdim(
      arg0,
      arg1,
    );
  }

  late final _fdimPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fdim');
  late final _fdim = _fdimPtr.asFunction<double Function(double, double)>();

  double fmaxf(
    double arg0,
    double arg1,
  ) {
    return _fmaxf(
      arg0,
      arg1,
    );
  }

  late final _fmaxfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmaxf');
  late final _fmaxf = _fmaxfPtr.asFunction<double Function(double, double)>();

  double fmax(
    double arg0,
    double arg1,
  ) {
    return _fmax(
      arg0,
      arg1,
    );
  }

  late final _fmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmax');
  late final _fmax = _fmaxPtr.asFunction<double Function(double, double)>();

  double fminf(
    double arg0,
    double arg1,
  ) {
    return _fminf(
      arg0,
      arg1,
    );
  }

  late final _fminfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fminf');
  late final _fminf = _fminfPtr.asFunction<double Function(double, double)>();

  double fmin(
    double arg0,
    double arg1,
  ) {
    return _fmin(
      arg0,
      arg1,
    );
  }

  late final _fminPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmin');
  late final _fmin = _fminPtr.asFunction<double Function(double, double)>();

  double fmaf(
    double arg0,
    double arg1,
    double arg2,
  ) {
    return _fmaf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fmafPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>>('fmaf');
  late final _fmaf =
      _fmafPtr.asFunction<double Function(double, double, double)>();

  double fma(
    double arg0,
    double arg1,
    double arg2,
  ) {
    return _fma(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>>('fma');
  late final _fma =
      _fmaPtr.asFunction<double Function(double, double, double)>();

  /// Apple extensions to the C standard                                        *
  double __exp10f(
    double arg0,
  ) {
    return ___exp10f(
      arg0,
    );
  }

  late final ___exp10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__exp10f');
  late final ___exp10f = ___exp10fPtr.asFunction<double Function(double)>();

  double __exp10(
    double arg0,
  ) {
    return ___exp10(
      arg0,
    );
  }

  late final ___exp10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__exp10');
  late final ___exp10 = ___exp10Ptr.asFunction<double Function(double)>();

  double __cospif(
    double arg0,
  ) {
    return ___cospif(
      arg0,
    );
  }

  late final ___cospifPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__cospif');
  late final ___cospif = ___cospifPtr.asFunction<double Function(double)>();

  double __cospi(
    double arg0,
  ) {
    return ___cospi(
      arg0,
    );
  }

  late final ___cospiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__cospi');
  late final ___cospi = ___cospiPtr.asFunction<double Function(double)>();

  double __sinpif(
    double arg0,
  ) {
    return ___sinpif(
      arg0,
    );
  }

  late final ___sinpifPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__sinpif');
  late final ___sinpif = ___sinpifPtr.asFunction<double Function(double)>();

  double __sinpi(
    double arg0,
  ) {
    return ___sinpi(
      arg0,
    );
  }

  late final ___sinpiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__sinpi');
  late final ___sinpi = ___sinpiPtr.asFunction<double Function(double)>();

  double __tanpif(
    double arg0,
  ) {
    return ___tanpif(
      arg0,
    );
  }

  late final ___tanpifPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__tanpif');
  late final ___tanpif = ___tanpifPtr.asFunction<double Function(double)>();

  double __tanpi(
    double arg0,
  ) {
    return ___tanpi(
      arg0,
    );
  }

  late final ___tanpiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__tanpi');
  late final ___tanpi = ___tanpiPtr.asFunction<double Function(double)>();

  __float2 __sincosf_stret(
    double arg0,
  ) {
    return ___sincosf_stret(
      arg0,
    );
  }

  late final ___sincosf_stretPtr =
      _lookup<ffi.NativeFunction<__float2 Function(ffi.Float)>>(
          '__sincosf_stret');
  late final ___sincosf_stret =
      ___sincosf_stretPtr.asFunction<__float2 Function(double)>();

  __double2 __sincos_stret(
    double arg0,
  ) {
    return ___sincos_stret(
      arg0,
    );
  }

  late final ___sincos_stretPtr =
      _lookup<ffi.NativeFunction<__double2 Function(ffi.Double)>>(
          '__sincos_stret');
  late final ___sincos_stret =
      ___sincos_stretPtr.asFunction<__double2 Function(double)>();

  __float2 __sincospif_stret(
    double arg0,
  ) {
    return ___sincospif_stret(
      arg0,
    );
  }

  late final ___sincospif_stretPtr =
      _lookup<ffi.NativeFunction<__float2 Function(ffi.Float)>>(
          '__sincospif_stret');
  late final ___sincospif_stret =
      ___sincospif_stretPtr.asFunction<__float2 Function(double)>();

  __double2 __sincospi_stret(
    double arg0,
  ) {
    return ___sincospi_stret(
      arg0,
    );
  }

  late final ___sincospi_stretPtr =
      _lookup<ffi.NativeFunction<__double2 Function(ffi.Double)>>(
          '__sincospi_stret');
  late final ___sincospi_stret =
      ___sincospi_stretPtr.asFunction<__double2 Function(double)>();

  double j0(
    double arg0,
  ) {
    return _j0(
      arg0,
    );
  }

  late final _j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j0');
  late final _j0 = _j0Ptr.asFunction<double Function(double)>();

  double j1(
    double arg0,
  ) {
    return _j1(
      arg0,
    );
  }

  late final _j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j1');
  late final _j1 = _j1Ptr.asFunction<double Function(double)>();

  double jn(
    int arg0,
    double arg1,
  ) {
    return _jn(
      arg0,
      arg1,
    );
  }

  late final _jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'jn');
  late final _jn = _jnPtr.asFunction<double Function(int, double)>();

  double y0(
    double arg0,
  ) {
    return _y0(
      arg0,
    );
  }

  late final _y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y0');
  late final _y0 = _y0Ptr.asFunction<double Function(double)>();

  double y1(
    double arg0,
  ) {
    return _y1(
      arg0,
    );
  }

  late final _y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y1');
  late final _y1 = _y1Ptr.asFunction<double Function(double)>();

  double yn(
    int arg0,
    double arg1,
  ) {
    return _yn(
      arg0,
      arg1,
    );
  }

  late final _ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'yn');
  late final _yn = _ynPtr.asFunction<double Function(int, double)>();

  double scalb(
    double arg0,
    double arg1,
  ) {
    return _scalb(
      arg0,
      arg1,
    );
  }

  late final _scalbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'scalb');
  late final _scalb = _scalbPtr.asFunction<double Function(double, double)>();

  late final ffi.Pointer<ffi.Int> _signgam = _lookup<ffi.Int>('signgam');

  int get signgam => _signgam.value;

  set signgam(int value) => _signgam.value = value;

  /// Constant for a dimension of "auto".
  late final ffi.Pointer<YGValue> _YGValueAuto =
      _lookup<YGValue>('YGValueAuto');

  YGValue get YGValueAuto => _YGValueAuto.ref;

  /// Constant for a dimension which is not defined.
  late final ffi.Pointer<YGValue> _YGValueUndefined =
      _lookup<YGValue>('YGValueUndefined');

  YGValue get YGValueUndefined => _YGValueUndefined.ref;

  /// Constant for a dimension that is zero-length.
  late final ffi.Pointer<YGValue> _YGValueZero =
      _lookup<YGValue>('YGValueZero');

  YGValue get YGValueZero => _YGValueZero.ref;

  /// Whether a dimension represented as a float is defined.
  bool YGFloatIsUndefined(
    double value,
  ) {
    return _YGFloatIsUndefined(
      value,
    );
  }

  late final _YGFloatIsUndefinedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Float)>>(
          'YGFloatIsUndefined');
  late final _YGFloatIsUndefined =
      _YGFloatIsUndefinedPtr.asFunction<bool Function(double)>();

  void YGNodeCopyStyle(
    YGNodeRef dstNode,
    YGNodeConstRef srcNode,
  ) {
    return _YGNodeCopyStyle(
      dstNode,
      srcNode,
    );
  }

  late final _YGNodeCopyStylePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, YGNodeConstRef)>>(
          'YGNodeCopyStyle');
  late final _YGNodeCopyStyle = _YGNodeCopyStylePtr.asFunction<
      void Function(YGNodeRef, YGNodeConstRef)>();

  void YGNodeStyleSetDirection(
    YGNodeRef node,
    int direction,
  ) {
    return _YGNodeStyleSetDirection(
      node,
      direction,
    );
  }

  late final _YGNodeStyleSetDirectionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Int32)>>(
          'YGNodeStyleSetDirection');
  late final _YGNodeStyleSetDirection =
      _YGNodeStyleSetDirectionPtr.asFunction<void Function(YGNodeRef, int)>();

  int YGNodeStyleGetDirection(
    YGNodeConstRef node,
  ) {
    return _YGNodeStyleGetDirection(
      node,
    );
  }

  late final _YGNodeStyleGetDirectionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(YGNodeConstRef)>>(
          'YGNodeStyleGetDirection');
  late final _YGNodeStyleGetDirection =
      _YGNodeStyleGetDirectionPtr.asFunction<int Function(YGNodeConstRef)>();

  void YGNodeStyleSetFlexDirection(
    YGNodeRef node,
    int flexDirection,
  ) {
    return _YGNodeStyleSetFlexDirection(
      node,
      flexDirection,
    );
  }

  late final _YGNodeStyleSetFlexDirectionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Int32)>>(
          'YGNodeStyleSetFlexDirection');
  late final _YGNodeStyleSetFlexDirection = _YGNodeStyleSetFlexDirectionPtr
      .asFunction<void Function(YGNodeRef, int)>();

  int YGNodeStyleGetFlexDirection(
    YGNodeConstRef node,
  ) {
    return _YGNodeStyleGetFlexDirection(
      node,
    );
  }

  late final _YGNodeStyleGetFlexDirectionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(YGNodeConstRef)>>(
          'YGNodeStyleGetFlexDirection');
  late final _YGNodeStyleGetFlexDirection = _YGNodeStyleGetFlexDirectionPtr
      .asFunction<int Function(YGNodeConstRef)>();

  void YGNodeStyleSetJustifyContent(
    YGNodeRef node,
    int justifyContent,
  ) {
    return _YGNodeStyleSetJustifyContent(
      node,
      justifyContent,
    );
  }

  late final _YGNodeStyleSetJustifyContentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Int32)>>(
          'YGNodeStyleSetJustifyContent');
  late final _YGNodeStyleSetJustifyContent = _YGNodeStyleSetJustifyContentPtr
      .asFunction<void Function(YGNodeRef, int)>();

  int YGNodeStyleGetJustifyContent(
    YGNodeConstRef node,
  ) {
    return _YGNodeStyleGetJustifyContent(
      node,
    );
  }

  late final _YGNodeStyleGetJustifyContentPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(YGNodeConstRef)>>(
          'YGNodeStyleGetJustifyContent');
  late final _YGNodeStyleGetJustifyContent = _YGNodeStyleGetJustifyContentPtr
      .asFunction<int Function(YGNodeConstRef)>();

  void YGNodeStyleSetAlignContent(
    YGNodeRef node,
    int alignContent,
  ) {
    return _YGNodeStyleSetAlignContent(
      node,
      alignContent,
    );
  }

  late final _YGNodeStyleSetAlignContentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Int32)>>(
          'YGNodeStyleSetAlignContent');
  late final _YGNodeStyleSetAlignContent = _YGNodeStyleSetAlignContentPtr
      .asFunction<void Function(YGNodeRef, int)>();

  int YGNodeStyleGetAlignContent(
    YGNodeConstRef node,
  ) {
    return _YGNodeStyleGetAlignContent(
      node,
    );
  }

  late final _YGNodeStyleGetAlignContentPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(YGNodeConstRef)>>(
          'YGNodeStyleGetAlignContent');
  late final _YGNodeStyleGetAlignContent =
      _YGNodeStyleGetAlignContentPtr.asFunction<int Function(YGNodeConstRef)>();

  void YGNodeStyleSetAlignItems(
    YGNodeRef node,
    int alignItems,
  ) {
    return _YGNodeStyleSetAlignItems(
      node,
      alignItems,
    );
  }

  late final _YGNodeStyleSetAlignItemsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Int32)>>(
          'YGNodeStyleSetAlignItems');
  late final _YGNodeStyleSetAlignItems =
      _YGNodeStyleSetAlignItemsPtr.asFunction<void Function(YGNodeRef, int)>();

  int YGNodeStyleGetAlignItems(
    YGNodeConstRef node,
  ) {
    return _YGNodeStyleGetAlignItems(
      node,
    );
  }

  late final _YGNodeStyleGetAlignItemsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(YGNodeConstRef)>>(
          'YGNodeStyleGetAlignItems');
  late final _YGNodeStyleGetAlignItems =
      _YGNodeStyleGetAlignItemsPtr.asFunction<int Function(YGNodeConstRef)>();

  void YGNodeStyleSetAlignSelf(
    YGNodeRef node,
    int alignSelf,
  ) {
    return _YGNodeStyleSetAlignSelf(
      node,
      alignSelf,
    );
  }

  late final _YGNodeStyleSetAlignSelfPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Int32)>>(
          'YGNodeStyleSetAlignSelf');
  late final _YGNodeStyleSetAlignSelf =
      _YGNodeStyleSetAlignSelfPtr.asFunction<void Function(YGNodeRef, int)>();

  int YGNodeStyleGetAlignSelf(
    YGNodeConstRef node,
  ) {
    return _YGNodeStyleGetAlignSelf(
      node,
    );
  }

  late final _YGNodeStyleGetAlignSelfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(YGNodeConstRef)>>(
          'YGNodeStyleGetAlignSelf');
  late final _YGNodeStyleGetAlignSelf =
      _YGNodeStyleGetAlignSelfPtr.asFunction<int Function(YGNodeConstRef)>();

  void YGNodeStyleSetPositionType(
    YGNodeRef node,
    int positionType,
  ) {
    return _YGNodeStyleSetPositionType(
      node,
      positionType,
    );
  }

  late final _YGNodeStyleSetPositionTypePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Int32)>>(
          'YGNodeStyleSetPositionType');
  late final _YGNodeStyleSetPositionType = _YGNodeStyleSetPositionTypePtr
      .asFunction<void Function(YGNodeRef, int)>();

  int YGNodeStyleGetPositionType(
    YGNodeConstRef node,
  ) {
    return _YGNodeStyleGetPositionType(
      node,
    );
  }

  late final _YGNodeStyleGetPositionTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(YGNodeConstRef)>>(
          'YGNodeStyleGetPositionType');
  late final _YGNodeStyleGetPositionType =
      _YGNodeStyleGetPositionTypePtr.asFunction<int Function(YGNodeConstRef)>();

  void YGNodeStyleSetFlexWrap(
    YGNodeRef node,
    int flexWrap,
  ) {
    return _YGNodeStyleSetFlexWrap(
      node,
      flexWrap,
    );
  }

  late final _YGNodeStyleSetFlexWrapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Int32)>>(
          'YGNodeStyleSetFlexWrap');
  late final _YGNodeStyleSetFlexWrap =
      _YGNodeStyleSetFlexWrapPtr.asFunction<void Function(YGNodeRef, int)>();

  int YGNodeStyleGetFlexWrap(
    YGNodeConstRef node,
  ) {
    return _YGNodeStyleGetFlexWrap(
      node,
    );
  }

  late final _YGNodeStyleGetFlexWrapPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(YGNodeConstRef)>>(
          'YGNodeStyleGetFlexWrap');
  late final _YGNodeStyleGetFlexWrap =
      _YGNodeStyleGetFlexWrapPtr.asFunction<int Function(YGNodeConstRef)>();

  void YGNodeStyleSetOverflow(
    YGNodeRef node,
    int overflow,
  ) {
    return _YGNodeStyleSetOverflow(
      node,
      overflow,
    );
  }

  late final _YGNodeStyleSetOverflowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Int32)>>(
          'YGNodeStyleSetOverflow');
  late final _YGNodeStyleSetOverflow =
      _YGNodeStyleSetOverflowPtr.asFunction<void Function(YGNodeRef, int)>();

  int YGNodeStyleGetOverflow(
    YGNodeConstRef node,
  ) {
    return _YGNodeStyleGetOverflow(
      node,
    );
  }

  late final _YGNodeStyleGetOverflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(YGNodeConstRef)>>(
          'YGNodeStyleGetOverflow');
  late final _YGNodeStyleGetOverflow =
      _YGNodeStyleGetOverflowPtr.asFunction<int Function(YGNodeConstRef)>();

  void YGNodeStyleSetDisplay(
    YGNodeRef node,
    int display,
  ) {
    return _YGNodeStyleSetDisplay(
      node,
      display,
    );
  }

  late final _YGNodeStyleSetDisplayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Int32)>>(
          'YGNodeStyleSetDisplay');
  late final _YGNodeStyleSetDisplay =
      _YGNodeStyleSetDisplayPtr.asFunction<void Function(YGNodeRef, int)>();

  int YGNodeStyleGetDisplay(
    YGNodeConstRef node,
  ) {
    return _YGNodeStyleGetDisplay(
      node,
    );
  }

  late final _YGNodeStyleGetDisplayPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(YGNodeConstRef)>>(
          'YGNodeStyleGetDisplay');
  late final _YGNodeStyleGetDisplay =
      _YGNodeStyleGetDisplayPtr.asFunction<int Function(YGNodeConstRef)>();

  void YGNodeStyleSetFlex(
    YGNodeRef node,
    double flex,
  ) {
    return _YGNodeStyleSetFlex(
      node,
      flex,
    );
  }

  late final _YGNodeStyleSetFlexPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Float)>>(
          'YGNodeStyleSetFlex');
  late final _YGNodeStyleSetFlex =
      _YGNodeStyleSetFlexPtr.asFunction<void Function(YGNodeRef, double)>();

  double YGNodeStyleGetFlex(
    YGNodeConstRef node,
  ) {
    return _YGNodeStyleGetFlex(
      node,
    );
  }

  late final _YGNodeStyleGetFlexPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(YGNodeConstRef)>>(
          'YGNodeStyleGetFlex');
  late final _YGNodeStyleGetFlex =
      _YGNodeStyleGetFlexPtr.asFunction<double Function(YGNodeConstRef)>();

  void YGNodeStyleSetFlexGrow(
    YGNodeRef node,
    double flexGrow,
  ) {
    return _YGNodeStyleSetFlexGrow(
      node,
      flexGrow,
    );
  }

  late final _YGNodeStyleSetFlexGrowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Float)>>(
          'YGNodeStyleSetFlexGrow');
  late final _YGNodeStyleSetFlexGrow =
      _YGNodeStyleSetFlexGrowPtr.asFunction<void Function(YGNodeRef, double)>();

  double YGNodeStyleGetFlexGrow(
    YGNodeConstRef node,
  ) {
    return _YGNodeStyleGetFlexGrow(
      node,
    );
  }

  late final _YGNodeStyleGetFlexGrowPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(YGNodeConstRef)>>(
          'YGNodeStyleGetFlexGrow');
  late final _YGNodeStyleGetFlexGrow =
      _YGNodeStyleGetFlexGrowPtr.asFunction<double Function(YGNodeConstRef)>();

  void YGNodeStyleSetFlexShrink(
    YGNodeRef node,
    double flexShrink,
  ) {
    return _YGNodeStyleSetFlexShrink(
      node,
      flexShrink,
    );
  }

  late final _YGNodeStyleSetFlexShrinkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Float)>>(
          'YGNodeStyleSetFlexShrink');
  late final _YGNodeStyleSetFlexShrink = _YGNodeStyleSetFlexShrinkPtr
      .asFunction<void Function(YGNodeRef, double)>();

  double YGNodeStyleGetFlexShrink(
    YGNodeConstRef node,
  ) {
    return _YGNodeStyleGetFlexShrink(
      node,
    );
  }

  late final _YGNodeStyleGetFlexShrinkPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(YGNodeConstRef)>>(
          'YGNodeStyleGetFlexShrink');
  late final _YGNodeStyleGetFlexShrink = _YGNodeStyleGetFlexShrinkPtr
      .asFunction<double Function(YGNodeConstRef)>();

  void YGNodeStyleSetFlexBasis(
    YGNodeRef node,
    double flexBasis,
  ) {
    return _YGNodeStyleSetFlexBasis(
      node,
      flexBasis,
    );
  }

  late final _YGNodeStyleSetFlexBasisPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Float)>>(
          'YGNodeStyleSetFlexBasis');
  late final _YGNodeStyleSetFlexBasis = _YGNodeStyleSetFlexBasisPtr.asFunction<
      void Function(YGNodeRef, double)>();

  void YGNodeStyleSetFlexBasisPercent(
    YGNodeRef node,
    double flexBasis,
  ) {
    return _YGNodeStyleSetFlexBasisPercent(
      node,
      flexBasis,
    );
  }

  late final _YGNodeStyleSetFlexBasisPercentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Float)>>(
          'YGNodeStyleSetFlexBasisPercent');
  late final _YGNodeStyleSetFlexBasisPercent =
      _YGNodeStyleSetFlexBasisPercentPtr.asFunction<
          void Function(YGNodeRef, double)>();

  void YGNodeStyleSetFlexBasisAuto(
    YGNodeRef node,
  ) {
    return _YGNodeStyleSetFlexBasisAuto(
      node,
    );
  }

  late final _YGNodeStyleSetFlexBasisAutoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeStyleSetFlexBasisAuto');
  late final _YGNodeStyleSetFlexBasisAuto =
      _YGNodeStyleSetFlexBasisAutoPtr.asFunction<void Function(YGNodeRef)>();

  void YGNodeStyleSetFlexBasisMaxContent(
    YGNodeRef node,
  ) {
    return _YGNodeStyleSetFlexBasisMaxContent(
      node,
    );
  }

  late final _YGNodeStyleSetFlexBasisMaxContentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeStyleSetFlexBasisMaxContent');
  late final _YGNodeStyleSetFlexBasisMaxContent =
      _YGNodeStyleSetFlexBasisMaxContentPtr.asFunction<
          void Function(YGNodeRef)>();

  void YGNodeStyleSetFlexBasisFitContent(
    YGNodeRef node,
  ) {
    return _YGNodeStyleSetFlexBasisFitContent(
      node,
    );
  }

  late final _YGNodeStyleSetFlexBasisFitContentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeStyleSetFlexBasisFitContent');
  late final _YGNodeStyleSetFlexBasisFitContent =
      _YGNodeStyleSetFlexBasisFitContentPtr.asFunction<
          void Function(YGNodeRef)>();

  void YGNodeStyleSetFlexBasisStretch(
    YGNodeRef node,
  ) {
    return _YGNodeStyleSetFlexBasisStretch(
      node,
    );
  }

  late final _YGNodeStyleSetFlexBasisStretchPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeStyleSetFlexBasisStretch');
  late final _YGNodeStyleSetFlexBasisStretch =
      _YGNodeStyleSetFlexBasisStretchPtr.asFunction<void Function(YGNodeRef)>();

  YGValue YGNodeStyleGetFlexBasis(
    YGNodeConstRef node,
  ) {
    return _YGNodeStyleGetFlexBasis(
      node,
    );
  }

  late final _YGNodeStyleGetFlexBasisPtr =
      _lookup<ffi.NativeFunction<YGValue Function(YGNodeConstRef)>>(
          'YGNodeStyleGetFlexBasis');
  late final _YGNodeStyleGetFlexBasis = _YGNodeStyleGetFlexBasisPtr.asFunction<
      YGValue Function(YGNodeConstRef)>();

  void YGNodeStyleSetPosition(
    YGNodeRef node,
    int edge,
    double position,
  ) {
    return _YGNodeStyleSetPosition(
      node,
      edge,
      position,
    );
  }

  late final _YGNodeStyleSetPositionPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(YGNodeRef, ffi.Int32, ffi.Float)>>(
      'YGNodeStyleSetPosition');
  late final _YGNodeStyleSetPosition = _YGNodeStyleSetPositionPtr.asFunction<
      void Function(YGNodeRef, int, double)>();

  void YGNodeStyleSetPositionPercent(
    YGNodeRef node,
    int edge,
    double position,
  ) {
    return _YGNodeStyleSetPositionPercent(
      node,
      edge,
      position,
    );
  }

  late final _YGNodeStyleSetPositionPercentPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(YGNodeRef, ffi.Int32, ffi.Float)>>(
      'YGNodeStyleSetPositionPercent');
  late final _YGNodeStyleSetPositionPercent = _YGNodeStyleSetPositionPercentPtr
      .asFunction<void Function(YGNodeRef, int, double)>();

  YGValue YGNodeStyleGetPosition(
    YGNodeConstRef node,
    int edge,
  ) {
    return _YGNodeStyleGetPosition(
      node,
      edge,
    );
  }

  late final _YGNodeStyleGetPositionPtr =
      _lookup<ffi.NativeFunction<YGValue Function(YGNodeConstRef, ffi.Int32)>>(
          'YGNodeStyleGetPosition');
  late final _YGNodeStyleGetPosition = _YGNodeStyleGetPositionPtr.asFunction<
      YGValue Function(YGNodeConstRef, int)>();

  void YGNodeStyleSetPositionAuto(
    YGNodeRef node,
    int edge,
  ) {
    return _YGNodeStyleSetPositionAuto(
      node,
      edge,
    );
  }

  late final _YGNodeStyleSetPositionAutoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Int32)>>(
          'YGNodeStyleSetPositionAuto');
  late final _YGNodeStyleSetPositionAuto = _YGNodeStyleSetPositionAutoPtr
      .asFunction<void Function(YGNodeRef, int)>();

  void YGNodeStyleSetMargin(
    YGNodeRef node,
    int edge,
    double margin,
  ) {
    return _YGNodeStyleSetMargin(
      node,
      edge,
      margin,
    );
  }

  late final _YGNodeStyleSetMarginPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(YGNodeRef, ffi.Int32, ffi.Float)>>(
      'YGNodeStyleSetMargin');
  late final _YGNodeStyleSetMargin = _YGNodeStyleSetMarginPtr.asFunction<
      void Function(YGNodeRef, int, double)>();

  void YGNodeStyleSetMarginPercent(
    YGNodeRef node,
    int edge,
    double margin,
  ) {
    return _YGNodeStyleSetMarginPercent(
      node,
      edge,
      margin,
    );
  }

  late final _YGNodeStyleSetMarginPercentPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(YGNodeRef, ffi.Int32, ffi.Float)>>(
      'YGNodeStyleSetMarginPercent');
  late final _YGNodeStyleSetMarginPercent = _YGNodeStyleSetMarginPercentPtr
      .asFunction<void Function(YGNodeRef, int, double)>();

  void YGNodeStyleSetMarginAuto(
    YGNodeRef node,
    int edge,
  ) {
    return _YGNodeStyleSetMarginAuto(
      node,
      edge,
    );
  }

  late final _YGNodeStyleSetMarginAutoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Int32)>>(
          'YGNodeStyleSetMarginAuto');
  late final _YGNodeStyleSetMarginAuto =
      _YGNodeStyleSetMarginAutoPtr.asFunction<void Function(YGNodeRef, int)>();

  YGValue YGNodeStyleGetMargin(
    YGNodeConstRef node,
    int edge,
  ) {
    return _YGNodeStyleGetMargin(
      node,
      edge,
    );
  }

  late final _YGNodeStyleGetMarginPtr =
      _lookup<ffi.NativeFunction<YGValue Function(YGNodeConstRef, ffi.Int32)>>(
          'YGNodeStyleGetMargin');
  late final _YGNodeStyleGetMargin = _YGNodeStyleGetMarginPtr.asFunction<
      YGValue Function(YGNodeConstRef, int)>();

  void YGNodeStyleSetPadding(
    YGNodeRef node,
    int edge,
    double padding,
  ) {
    return _YGNodeStyleSetPadding(
      node,
      edge,
      padding,
    );
  }

  late final _YGNodeStyleSetPaddingPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(YGNodeRef, ffi.Int32, ffi.Float)>>(
      'YGNodeStyleSetPadding');
  late final _YGNodeStyleSetPadding = _YGNodeStyleSetPaddingPtr.asFunction<
      void Function(YGNodeRef, int, double)>();

  void YGNodeStyleSetPaddingPercent(
    YGNodeRef node,
    int edge,
    double padding,
  ) {
    return _YGNodeStyleSetPaddingPercent(
      node,
      edge,
      padding,
    );
  }

  late final _YGNodeStyleSetPaddingPercentPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(YGNodeRef, ffi.Int32, ffi.Float)>>(
      'YGNodeStyleSetPaddingPercent');
  late final _YGNodeStyleSetPaddingPercent = _YGNodeStyleSetPaddingPercentPtr
      .asFunction<void Function(YGNodeRef, int, double)>();

  YGValue YGNodeStyleGetPadding(
    YGNodeConstRef node,
    int edge,
  ) {
    return _YGNodeStyleGetPadding(
      node,
      edge,
    );
  }

  late final _YGNodeStyleGetPaddingPtr =
      _lookup<ffi.NativeFunction<YGValue Function(YGNodeConstRef, ffi.Int32)>>(
          'YGNodeStyleGetPadding');
  late final _YGNodeStyleGetPadding = _YGNodeStyleGetPaddingPtr.asFunction<
      YGValue Function(YGNodeConstRef, int)>();

  void YGNodeStyleSetBorder(
    YGNodeRef node,
    int edge,
    double border,
  ) {
    return _YGNodeStyleSetBorder(
      node,
      edge,
      border,
    );
  }

  late final _YGNodeStyleSetBorderPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(YGNodeRef, ffi.Int32, ffi.Float)>>(
      'YGNodeStyleSetBorder');
  late final _YGNodeStyleSetBorder = _YGNodeStyleSetBorderPtr.asFunction<
      void Function(YGNodeRef, int, double)>();

  double YGNodeStyleGetBorder(
    YGNodeConstRef node,
    int edge,
  ) {
    return _YGNodeStyleGetBorder(
      node,
      edge,
    );
  }

  late final _YGNodeStyleGetBorderPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(YGNodeConstRef, ffi.Int32)>>(
      'YGNodeStyleGetBorder');
  late final _YGNodeStyleGetBorder = _YGNodeStyleGetBorderPtr.asFunction<
      double Function(YGNodeConstRef, int)>();

  void YGNodeStyleSetGap(
    YGNodeRef node,
    int gutter,
    double gapLength,
  ) {
    return _YGNodeStyleSetGap(
      node,
      gutter,
      gapLength,
    );
  }

  late final _YGNodeStyleSetGapPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(YGNodeRef, ffi.Int32, ffi.Float)>>(
      'YGNodeStyleSetGap');
  late final _YGNodeStyleSetGap =
      _YGNodeStyleSetGapPtr.asFunction<void Function(YGNodeRef, int, double)>();

  void YGNodeStyleSetGapPercent(
    YGNodeRef node,
    int gutter,
    double gapLength,
  ) {
    return _YGNodeStyleSetGapPercent(
      node,
      gutter,
      gapLength,
    );
  }

  late final _YGNodeStyleSetGapPercentPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(YGNodeRef, ffi.Int32, ffi.Float)>>(
      'YGNodeStyleSetGapPercent');
  late final _YGNodeStyleSetGapPercent = _YGNodeStyleSetGapPercentPtr
      .asFunction<void Function(YGNodeRef, int, double)>();

  YGValue YGNodeStyleGetGap(
    YGNodeConstRef node,
    int gutter,
  ) {
    return _YGNodeStyleGetGap(
      node,
      gutter,
    );
  }

  late final _YGNodeStyleGetGapPtr =
      _lookup<ffi.NativeFunction<YGValue Function(YGNodeConstRef, ffi.Int32)>>(
          'YGNodeStyleGetGap');
  late final _YGNodeStyleGetGap =
      _YGNodeStyleGetGapPtr.asFunction<YGValue Function(YGNodeConstRef, int)>();

  void YGNodeStyleSetBoxSizing(
    YGNodeRef node,
    int boxSizing,
  ) {
    return _YGNodeStyleSetBoxSizing(
      node,
      boxSizing,
    );
  }

  late final _YGNodeStyleSetBoxSizingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Int32)>>(
          'YGNodeStyleSetBoxSizing');
  late final _YGNodeStyleSetBoxSizing =
      _YGNodeStyleSetBoxSizingPtr.asFunction<void Function(YGNodeRef, int)>();

  int YGNodeStyleGetBoxSizing(
    YGNodeConstRef node,
  ) {
    return _YGNodeStyleGetBoxSizing(
      node,
    );
  }

  late final _YGNodeStyleGetBoxSizingPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(YGNodeConstRef)>>(
          'YGNodeStyleGetBoxSizing');
  late final _YGNodeStyleGetBoxSizing =
      _YGNodeStyleGetBoxSizingPtr.asFunction<int Function(YGNodeConstRef)>();

  void YGNodeStyleSetWidth(
    YGNodeRef node,
    double width,
  ) {
    return _YGNodeStyleSetWidth(
      node,
      width,
    );
  }

  late final _YGNodeStyleSetWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Float)>>(
          'YGNodeStyleSetWidth');
  late final _YGNodeStyleSetWidth =
      _YGNodeStyleSetWidthPtr.asFunction<void Function(YGNodeRef, double)>();

  void YGNodeStyleSetWidthPercent(
    YGNodeRef node,
    double width,
  ) {
    return _YGNodeStyleSetWidthPercent(
      node,
      width,
    );
  }

  late final _YGNodeStyleSetWidthPercentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Float)>>(
          'YGNodeStyleSetWidthPercent');
  late final _YGNodeStyleSetWidthPercent = _YGNodeStyleSetWidthPercentPtr
      .asFunction<void Function(YGNodeRef, double)>();

  void YGNodeStyleSetWidthAuto(
    YGNodeRef node,
  ) {
    return _YGNodeStyleSetWidthAuto(
      node,
    );
  }

  late final _YGNodeStyleSetWidthAutoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeStyleSetWidthAuto');
  late final _YGNodeStyleSetWidthAuto =
      _YGNodeStyleSetWidthAutoPtr.asFunction<void Function(YGNodeRef)>();

  void YGNodeStyleSetWidthMaxContent(
    YGNodeRef node,
  ) {
    return _YGNodeStyleSetWidthMaxContent(
      node,
    );
  }

  late final _YGNodeStyleSetWidthMaxContentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeStyleSetWidthMaxContent');
  late final _YGNodeStyleSetWidthMaxContent =
      _YGNodeStyleSetWidthMaxContentPtr.asFunction<void Function(YGNodeRef)>();

  void YGNodeStyleSetWidthFitContent(
    YGNodeRef node,
  ) {
    return _YGNodeStyleSetWidthFitContent(
      node,
    );
  }

  late final _YGNodeStyleSetWidthFitContentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeStyleSetWidthFitContent');
  late final _YGNodeStyleSetWidthFitContent =
      _YGNodeStyleSetWidthFitContentPtr.asFunction<void Function(YGNodeRef)>();

  void YGNodeStyleSetWidthStretch(
    YGNodeRef node,
  ) {
    return _YGNodeStyleSetWidthStretch(
      node,
    );
  }

  late final _YGNodeStyleSetWidthStretchPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeStyleSetWidthStretch');
  late final _YGNodeStyleSetWidthStretch =
      _YGNodeStyleSetWidthStretchPtr.asFunction<void Function(YGNodeRef)>();

  YGValue YGNodeStyleGetWidth(
    YGNodeConstRef node,
  ) {
    return _YGNodeStyleGetWidth(
      node,
    );
  }

  late final _YGNodeStyleGetWidthPtr =
      _lookup<ffi.NativeFunction<YGValue Function(YGNodeConstRef)>>(
          'YGNodeStyleGetWidth');
  late final _YGNodeStyleGetWidth =
      _YGNodeStyleGetWidthPtr.asFunction<YGValue Function(YGNodeConstRef)>();

  void YGNodeStyleSetHeight(
    YGNodeRef node,
    double height,
  ) {
    return _YGNodeStyleSetHeight(
      node,
      height,
    );
  }

  late final _YGNodeStyleSetHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Float)>>(
          'YGNodeStyleSetHeight');
  late final _YGNodeStyleSetHeight =
      _YGNodeStyleSetHeightPtr.asFunction<void Function(YGNodeRef, double)>();

  void YGNodeStyleSetHeightPercent(
    YGNodeRef node,
    double height,
  ) {
    return _YGNodeStyleSetHeightPercent(
      node,
      height,
    );
  }

  late final _YGNodeStyleSetHeightPercentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Float)>>(
          'YGNodeStyleSetHeightPercent');
  late final _YGNodeStyleSetHeightPercent = _YGNodeStyleSetHeightPercentPtr
      .asFunction<void Function(YGNodeRef, double)>();

  void YGNodeStyleSetHeightAuto(
    YGNodeRef node,
  ) {
    return _YGNodeStyleSetHeightAuto(
      node,
    );
  }

  late final _YGNodeStyleSetHeightAutoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeStyleSetHeightAuto');
  late final _YGNodeStyleSetHeightAuto =
      _YGNodeStyleSetHeightAutoPtr.asFunction<void Function(YGNodeRef)>();

  void YGNodeStyleSetHeightMaxContent(
    YGNodeRef node,
  ) {
    return _YGNodeStyleSetHeightMaxContent(
      node,
    );
  }

  late final _YGNodeStyleSetHeightMaxContentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeStyleSetHeightMaxContent');
  late final _YGNodeStyleSetHeightMaxContent =
      _YGNodeStyleSetHeightMaxContentPtr.asFunction<void Function(YGNodeRef)>();

  void YGNodeStyleSetHeightFitContent(
    YGNodeRef node,
  ) {
    return _YGNodeStyleSetHeightFitContent(
      node,
    );
  }

  late final _YGNodeStyleSetHeightFitContentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeStyleSetHeightFitContent');
  late final _YGNodeStyleSetHeightFitContent =
      _YGNodeStyleSetHeightFitContentPtr.asFunction<void Function(YGNodeRef)>();

  void YGNodeStyleSetHeightStretch(
    YGNodeRef node,
  ) {
    return _YGNodeStyleSetHeightStretch(
      node,
    );
  }

  late final _YGNodeStyleSetHeightStretchPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeStyleSetHeightStretch');
  late final _YGNodeStyleSetHeightStretch =
      _YGNodeStyleSetHeightStretchPtr.asFunction<void Function(YGNodeRef)>();

  YGValue YGNodeStyleGetHeight(
    YGNodeConstRef node,
  ) {
    return _YGNodeStyleGetHeight(
      node,
    );
  }

  late final _YGNodeStyleGetHeightPtr =
      _lookup<ffi.NativeFunction<YGValue Function(YGNodeConstRef)>>(
          'YGNodeStyleGetHeight');
  late final _YGNodeStyleGetHeight =
      _YGNodeStyleGetHeightPtr.asFunction<YGValue Function(YGNodeConstRef)>();

  void YGNodeStyleSetMinWidth(
    YGNodeRef node,
    double minWidth,
  ) {
    return _YGNodeStyleSetMinWidth(
      node,
      minWidth,
    );
  }

  late final _YGNodeStyleSetMinWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Float)>>(
          'YGNodeStyleSetMinWidth');
  late final _YGNodeStyleSetMinWidth =
      _YGNodeStyleSetMinWidthPtr.asFunction<void Function(YGNodeRef, double)>();

  void YGNodeStyleSetMinWidthPercent(
    YGNodeRef node,
    double minWidth,
  ) {
    return _YGNodeStyleSetMinWidthPercent(
      node,
      minWidth,
    );
  }

  late final _YGNodeStyleSetMinWidthPercentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Float)>>(
          'YGNodeStyleSetMinWidthPercent');
  late final _YGNodeStyleSetMinWidthPercent = _YGNodeStyleSetMinWidthPercentPtr
      .asFunction<void Function(YGNodeRef, double)>();

  void YGNodeStyleSetMinWidthMaxContent(
    YGNodeRef node,
  ) {
    return _YGNodeStyleSetMinWidthMaxContent(
      node,
    );
  }

  late final _YGNodeStyleSetMinWidthMaxContentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeStyleSetMinWidthMaxContent');
  late final _YGNodeStyleSetMinWidthMaxContent =
      _YGNodeStyleSetMinWidthMaxContentPtr.asFunction<
          void Function(YGNodeRef)>();

  void YGNodeStyleSetMinWidthFitContent(
    YGNodeRef node,
  ) {
    return _YGNodeStyleSetMinWidthFitContent(
      node,
    );
  }

  late final _YGNodeStyleSetMinWidthFitContentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeStyleSetMinWidthFitContent');
  late final _YGNodeStyleSetMinWidthFitContent =
      _YGNodeStyleSetMinWidthFitContentPtr.asFunction<
          void Function(YGNodeRef)>();

  void YGNodeStyleSetMinWidthStretch(
    YGNodeRef node,
  ) {
    return _YGNodeStyleSetMinWidthStretch(
      node,
    );
  }

  late final _YGNodeStyleSetMinWidthStretchPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeStyleSetMinWidthStretch');
  late final _YGNodeStyleSetMinWidthStretch =
      _YGNodeStyleSetMinWidthStretchPtr.asFunction<void Function(YGNodeRef)>();

  YGValue YGNodeStyleGetMinWidth(
    YGNodeConstRef node,
  ) {
    return _YGNodeStyleGetMinWidth(
      node,
    );
  }

  late final _YGNodeStyleGetMinWidthPtr =
      _lookup<ffi.NativeFunction<YGValue Function(YGNodeConstRef)>>(
          'YGNodeStyleGetMinWidth');
  late final _YGNodeStyleGetMinWidth =
      _YGNodeStyleGetMinWidthPtr.asFunction<YGValue Function(YGNodeConstRef)>();

  void YGNodeStyleSetMinHeight(
    YGNodeRef node,
    double minHeight,
  ) {
    return _YGNodeStyleSetMinHeight(
      node,
      minHeight,
    );
  }

  late final _YGNodeStyleSetMinHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Float)>>(
          'YGNodeStyleSetMinHeight');
  late final _YGNodeStyleSetMinHeight = _YGNodeStyleSetMinHeightPtr.asFunction<
      void Function(YGNodeRef, double)>();

  void YGNodeStyleSetMinHeightPercent(
    YGNodeRef node,
    double minHeight,
  ) {
    return _YGNodeStyleSetMinHeightPercent(
      node,
      minHeight,
    );
  }

  late final _YGNodeStyleSetMinHeightPercentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Float)>>(
          'YGNodeStyleSetMinHeightPercent');
  late final _YGNodeStyleSetMinHeightPercent =
      _YGNodeStyleSetMinHeightPercentPtr.asFunction<
          void Function(YGNodeRef, double)>();

  void YGNodeStyleSetMinHeightMaxContent(
    YGNodeRef node,
  ) {
    return _YGNodeStyleSetMinHeightMaxContent(
      node,
    );
  }

  late final _YGNodeStyleSetMinHeightMaxContentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeStyleSetMinHeightMaxContent');
  late final _YGNodeStyleSetMinHeightMaxContent =
      _YGNodeStyleSetMinHeightMaxContentPtr.asFunction<
          void Function(YGNodeRef)>();

  void YGNodeStyleSetMinHeightFitContent(
    YGNodeRef node,
  ) {
    return _YGNodeStyleSetMinHeightFitContent(
      node,
    );
  }

  late final _YGNodeStyleSetMinHeightFitContentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeStyleSetMinHeightFitContent');
  late final _YGNodeStyleSetMinHeightFitContent =
      _YGNodeStyleSetMinHeightFitContentPtr.asFunction<
          void Function(YGNodeRef)>();

  void YGNodeStyleSetMinHeightStretch(
    YGNodeRef node,
  ) {
    return _YGNodeStyleSetMinHeightStretch(
      node,
    );
  }

  late final _YGNodeStyleSetMinHeightStretchPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeStyleSetMinHeightStretch');
  late final _YGNodeStyleSetMinHeightStretch =
      _YGNodeStyleSetMinHeightStretchPtr.asFunction<void Function(YGNodeRef)>();

  YGValue YGNodeStyleGetMinHeight(
    YGNodeConstRef node,
  ) {
    return _YGNodeStyleGetMinHeight(
      node,
    );
  }

  late final _YGNodeStyleGetMinHeightPtr =
      _lookup<ffi.NativeFunction<YGValue Function(YGNodeConstRef)>>(
          'YGNodeStyleGetMinHeight');
  late final _YGNodeStyleGetMinHeight = _YGNodeStyleGetMinHeightPtr.asFunction<
      YGValue Function(YGNodeConstRef)>();

  void YGNodeStyleSetMaxWidth(
    YGNodeRef node,
    double maxWidth,
  ) {
    return _YGNodeStyleSetMaxWidth(
      node,
      maxWidth,
    );
  }

  late final _YGNodeStyleSetMaxWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Float)>>(
          'YGNodeStyleSetMaxWidth');
  late final _YGNodeStyleSetMaxWidth =
      _YGNodeStyleSetMaxWidthPtr.asFunction<void Function(YGNodeRef, double)>();

  void YGNodeStyleSetMaxWidthPercent(
    YGNodeRef node,
    double maxWidth,
  ) {
    return _YGNodeStyleSetMaxWidthPercent(
      node,
      maxWidth,
    );
  }

  late final _YGNodeStyleSetMaxWidthPercentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Float)>>(
          'YGNodeStyleSetMaxWidthPercent');
  late final _YGNodeStyleSetMaxWidthPercent = _YGNodeStyleSetMaxWidthPercentPtr
      .asFunction<void Function(YGNodeRef, double)>();

  void YGNodeStyleSetMaxWidthMaxContent(
    YGNodeRef node,
  ) {
    return _YGNodeStyleSetMaxWidthMaxContent(
      node,
    );
  }

  late final _YGNodeStyleSetMaxWidthMaxContentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeStyleSetMaxWidthMaxContent');
  late final _YGNodeStyleSetMaxWidthMaxContent =
      _YGNodeStyleSetMaxWidthMaxContentPtr.asFunction<
          void Function(YGNodeRef)>();

  void YGNodeStyleSetMaxWidthFitContent(
    YGNodeRef node,
  ) {
    return _YGNodeStyleSetMaxWidthFitContent(
      node,
    );
  }

  late final _YGNodeStyleSetMaxWidthFitContentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeStyleSetMaxWidthFitContent');
  late final _YGNodeStyleSetMaxWidthFitContent =
      _YGNodeStyleSetMaxWidthFitContentPtr.asFunction<
          void Function(YGNodeRef)>();

  void YGNodeStyleSetMaxWidthStretch(
    YGNodeRef node,
  ) {
    return _YGNodeStyleSetMaxWidthStretch(
      node,
    );
  }

  late final _YGNodeStyleSetMaxWidthStretchPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeStyleSetMaxWidthStretch');
  late final _YGNodeStyleSetMaxWidthStretch =
      _YGNodeStyleSetMaxWidthStretchPtr.asFunction<void Function(YGNodeRef)>();

  YGValue YGNodeStyleGetMaxWidth(
    YGNodeConstRef node,
  ) {
    return _YGNodeStyleGetMaxWidth(
      node,
    );
  }

  late final _YGNodeStyleGetMaxWidthPtr =
      _lookup<ffi.NativeFunction<YGValue Function(YGNodeConstRef)>>(
          'YGNodeStyleGetMaxWidth');
  late final _YGNodeStyleGetMaxWidth =
      _YGNodeStyleGetMaxWidthPtr.asFunction<YGValue Function(YGNodeConstRef)>();

  void YGNodeStyleSetMaxHeight(
    YGNodeRef node,
    double maxHeight,
  ) {
    return _YGNodeStyleSetMaxHeight(
      node,
      maxHeight,
    );
  }

  late final _YGNodeStyleSetMaxHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Float)>>(
          'YGNodeStyleSetMaxHeight');
  late final _YGNodeStyleSetMaxHeight = _YGNodeStyleSetMaxHeightPtr.asFunction<
      void Function(YGNodeRef, double)>();

  void YGNodeStyleSetMaxHeightPercent(
    YGNodeRef node,
    double maxHeight,
  ) {
    return _YGNodeStyleSetMaxHeightPercent(
      node,
      maxHeight,
    );
  }

  late final _YGNodeStyleSetMaxHeightPercentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Float)>>(
          'YGNodeStyleSetMaxHeightPercent');
  late final _YGNodeStyleSetMaxHeightPercent =
      _YGNodeStyleSetMaxHeightPercentPtr.asFunction<
          void Function(YGNodeRef, double)>();

  void YGNodeStyleSetMaxHeightMaxContent(
    YGNodeRef node,
  ) {
    return _YGNodeStyleSetMaxHeightMaxContent(
      node,
    );
  }

  late final _YGNodeStyleSetMaxHeightMaxContentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeStyleSetMaxHeightMaxContent');
  late final _YGNodeStyleSetMaxHeightMaxContent =
      _YGNodeStyleSetMaxHeightMaxContentPtr.asFunction<
          void Function(YGNodeRef)>();

  void YGNodeStyleSetMaxHeightFitContent(
    YGNodeRef node,
  ) {
    return _YGNodeStyleSetMaxHeightFitContent(
      node,
    );
  }

  late final _YGNodeStyleSetMaxHeightFitContentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeStyleSetMaxHeightFitContent');
  late final _YGNodeStyleSetMaxHeightFitContent =
      _YGNodeStyleSetMaxHeightFitContentPtr.asFunction<
          void Function(YGNodeRef)>();

  void YGNodeStyleSetMaxHeightStretch(
    YGNodeRef node,
  ) {
    return _YGNodeStyleSetMaxHeightStretch(
      node,
    );
  }

  late final _YGNodeStyleSetMaxHeightStretchPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef)>>(
          'YGNodeStyleSetMaxHeightStretch');
  late final _YGNodeStyleSetMaxHeightStretch =
      _YGNodeStyleSetMaxHeightStretchPtr.asFunction<void Function(YGNodeRef)>();

  YGValue YGNodeStyleGetMaxHeight(
    YGNodeConstRef node,
  ) {
    return _YGNodeStyleGetMaxHeight(
      node,
    );
  }

  late final _YGNodeStyleGetMaxHeightPtr =
      _lookup<ffi.NativeFunction<YGValue Function(YGNodeConstRef)>>(
          'YGNodeStyleGetMaxHeight');
  late final _YGNodeStyleGetMaxHeight = _YGNodeStyleGetMaxHeightPtr.asFunction<
      YGValue Function(YGNodeConstRef)>();

  void YGNodeStyleSetAspectRatio(
    YGNodeRef node,
    double aspectRatio,
  ) {
    return _YGNodeStyleSetAspectRatio(
      node,
      aspectRatio,
    );
  }

  late final _YGNodeStyleSetAspectRatioPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(YGNodeRef, ffi.Float)>>(
          'YGNodeStyleSetAspectRatio');
  late final _YGNodeStyleSetAspectRatio = _YGNodeStyleSetAspectRatioPtr
      .asFunction<void Function(YGNodeRef, double)>();

  double YGNodeStyleGetAspectRatio(
    YGNodeConstRef node,
  ) {
    return _YGNodeStyleGetAspectRatio(
      node,
    );
  }

  late final _YGNodeStyleGetAspectRatioPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(YGNodeConstRef)>>(
          'YGNodeStyleGetAspectRatio');
  late final _YGNodeStyleGetAspectRatio = _YGNodeStyleGetAspectRatioPtr
      .asFunction<double Function(YGNodeConstRef)>();

  double YGNodeLayoutGetLeft(
    YGNodeConstRef node,
  ) {
    return _YGNodeLayoutGetLeft(
      node,
    );
  }

  late final _YGNodeLayoutGetLeftPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(YGNodeConstRef)>>(
          'YGNodeLayoutGetLeft');
  late final _YGNodeLayoutGetLeft =
      _YGNodeLayoutGetLeftPtr.asFunction<double Function(YGNodeConstRef)>();

  double YGNodeLayoutGetTop(
    YGNodeConstRef node,
  ) {
    return _YGNodeLayoutGetTop(
      node,
    );
  }

  late final _YGNodeLayoutGetTopPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(YGNodeConstRef)>>(
          'YGNodeLayoutGetTop');
  late final _YGNodeLayoutGetTop =
      _YGNodeLayoutGetTopPtr.asFunction<double Function(YGNodeConstRef)>();

  double YGNodeLayoutGetRight(
    YGNodeConstRef node,
  ) {
    return _YGNodeLayoutGetRight(
      node,
    );
  }

  late final _YGNodeLayoutGetRightPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(YGNodeConstRef)>>(
          'YGNodeLayoutGetRight');
  late final _YGNodeLayoutGetRight =
      _YGNodeLayoutGetRightPtr.asFunction<double Function(YGNodeConstRef)>();

  double YGNodeLayoutGetBottom(
    YGNodeConstRef node,
  ) {
    return _YGNodeLayoutGetBottom(
      node,
    );
  }

  late final _YGNodeLayoutGetBottomPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(YGNodeConstRef)>>(
          'YGNodeLayoutGetBottom');
  late final _YGNodeLayoutGetBottom =
      _YGNodeLayoutGetBottomPtr.asFunction<double Function(YGNodeConstRef)>();

  double YGNodeLayoutGetWidth(
    YGNodeConstRef node,
  ) {
    return _YGNodeLayoutGetWidth(
      node,
    );
  }

  late final _YGNodeLayoutGetWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(YGNodeConstRef)>>(
          'YGNodeLayoutGetWidth');
  late final _YGNodeLayoutGetWidth =
      _YGNodeLayoutGetWidthPtr.asFunction<double Function(YGNodeConstRef)>();

  double YGNodeLayoutGetHeight(
    YGNodeConstRef node,
  ) {
    return _YGNodeLayoutGetHeight(
      node,
    );
  }

  late final _YGNodeLayoutGetHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(YGNodeConstRef)>>(
          'YGNodeLayoutGetHeight');
  late final _YGNodeLayoutGetHeight =
      _YGNodeLayoutGetHeightPtr.asFunction<double Function(YGNodeConstRef)>();

  int YGNodeLayoutGetDirection(
    YGNodeConstRef node,
  ) {
    return _YGNodeLayoutGetDirection(
      node,
    );
  }

  late final _YGNodeLayoutGetDirectionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(YGNodeConstRef)>>(
          'YGNodeLayoutGetDirection');
  late final _YGNodeLayoutGetDirection =
      _YGNodeLayoutGetDirectionPtr.asFunction<int Function(YGNodeConstRef)>();

  bool YGNodeLayoutGetHadOverflow(
    YGNodeConstRef node,
  ) {
    return _YGNodeLayoutGetHadOverflow(
      node,
    );
  }

  late final _YGNodeLayoutGetHadOverflowPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(YGNodeConstRef)>>(
          'YGNodeLayoutGetHadOverflow');
  late final _YGNodeLayoutGetHadOverflow = _YGNodeLayoutGetHadOverflowPtr
      .asFunction<bool Function(YGNodeConstRef)>();

  double YGNodeLayoutGetMargin(
    YGNodeConstRef node,
    int edge,
  ) {
    return _YGNodeLayoutGetMargin(
      node,
      edge,
    );
  }

  late final _YGNodeLayoutGetMarginPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(YGNodeConstRef, ffi.Int32)>>(
      'YGNodeLayoutGetMargin');
  late final _YGNodeLayoutGetMargin = _YGNodeLayoutGetMarginPtr.asFunction<
      double Function(YGNodeConstRef, int)>();

  double YGNodeLayoutGetBorder(
    YGNodeConstRef node,
    int edge,
  ) {
    return _YGNodeLayoutGetBorder(
      node,
      edge,
    );
  }

  late final _YGNodeLayoutGetBorderPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(YGNodeConstRef, ffi.Int32)>>(
      'YGNodeLayoutGetBorder');
  late final _YGNodeLayoutGetBorder = _YGNodeLayoutGetBorderPtr.asFunction<
      double Function(YGNodeConstRef, int)>();

  double YGNodeLayoutGetPadding(
    YGNodeConstRef node,
    int edge,
  ) {
    return _YGNodeLayoutGetPadding(
      node,
      edge,
    );
  }

  late final _YGNodeLayoutGetPaddingPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(YGNodeConstRef, ffi.Int32)>>(
      'YGNodeLayoutGetPadding');
  late final _YGNodeLayoutGetPadding = _YGNodeLayoutGetPaddingPtr.asFunction<
      double Function(YGNodeConstRef, int)>();

  /// Return the measured height of the node, before layout rounding
  double YGNodeLayoutGetRawHeight(
    YGNodeConstRef node,
  ) {
    return _YGNodeLayoutGetRawHeight(
      node,
    );
  }

  late final _YGNodeLayoutGetRawHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(YGNodeConstRef)>>(
          'YGNodeLayoutGetRawHeight');
  late final _YGNodeLayoutGetRawHeight = _YGNodeLayoutGetRawHeightPtr
      .asFunction<double Function(YGNodeConstRef)>();

  /// Return the measured width of the node, before layout rounding
  double YGNodeLayoutGetRawWidth(
    YGNodeConstRef node,
  ) {
    return _YGNodeLayoutGetRawWidth(
      node,
    );
  }

  late final _YGNodeLayoutGetRawWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(YGNodeConstRef)>>(
          'YGNodeLayoutGetRawWidth');
  late final _YGNodeLayoutGetRawWidth =
      _YGNodeLayoutGetRawWidthPtr.asFunction<double Function(YGNodeConstRef)>();
}

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

final class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

abstract class YGAlign {
  static const int YGAlignAuto = 0;
  static const int YGAlignFlexStart = 1;
  static const int YGAlignCenter = 2;
  static const int YGAlignFlexEnd = 3;
  static const int YGAlignStretch = 4;
  static const int YGAlignBaseline = 5;
  static const int YGAlignSpaceBetween = 6;
  static const int YGAlignSpaceAround = 7;
  static const int YGAlignSpaceEvenly = 8;
}

abstract class YGBoxSizing {
  static const int YGBoxSizingBorderBox = 0;
  static const int YGBoxSizingContentBox = 1;
}

abstract class YGDimension {
  static const int YGDimensionWidth = 0;
  static const int YGDimensionHeight = 1;
}

abstract class YGDirection {
  static const int YGDirectionInherit = 0;
  static const int YGDirectionLTR = 1;
  static const int YGDirectionRTL = 2;
}

abstract class YGDisplay {
  static const int YGDisplayFlex = 0;
  static const int YGDisplayNone = 1;
  static const int YGDisplayContents = 2;
}

abstract class YGEdge {
  static const int YGEdgeLeft = 0;
  static const int YGEdgeTop = 1;
  static const int YGEdgeRight = 2;
  static const int YGEdgeBottom = 3;
  static const int YGEdgeStart = 4;
  static const int YGEdgeEnd = 5;
  static const int YGEdgeHorizontal = 6;
  static const int YGEdgeVertical = 7;
  static const int YGEdgeAll = 8;
}

abstract class YGErrata {
  static const int YGErrataNone = 0;
  static const int YGErrataStretchFlexBasis = 1;
  static const int YGErrataAbsolutePositionWithoutInsetsExcludesPadding = 2;
  static const int YGErrataAbsolutePercentAgainstInnerSize = 4;
  static const int YGErrataAll = 2147483647;
  static const int YGErrataClassic = 2147483646;
}

abstract class YGExperimentalFeature {
  static const int YGExperimentalFeatureWebFlexBasis = 0;
}

abstract class YGFlexDirection {
  static const int YGFlexDirectionColumn = 0;
  static const int YGFlexDirectionColumnReverse = 1;
  static const int YGFlexDirectionRow = 2;
  static const int YGFlexDirectionRowReverse = 3;
}

abstract class YGGutter {
  static const int YGGutterColumn = 0;
  static const int YGGutterRow = 1;
  static const int YGGutterAll = 2;
}

abstract class YGJustify {
  static const int YGJustifyFlexStart = 0;
  static const int YGJustifyCenter = 1;
  static const int YGJustifyFlexEnd = 2;
  static const int YGJustifySpaceBetween = 3;
  static const int YGJustifySpaceAround = 4;
  static const int YGJustifySpaceEvenly = 5;
}

abstract class YGLogLevel {
  static const int YGLogLevelError = 0;
  static const int YGLogLevelWarn = 1;
  static const int YGLogLevelInfo = 2;
  static const int YGLogLevelDebug = 3;
  static const int YGLogLevelVerbose = 4;
  static const int YGLogLevelFatal = 5;
}

abstract class YGMeasureMode {
  static const int YGMeasureModeUndefined = 0;
  static const int YGMeasureModeExactly = 1;
  static const int YGMeasureModeAtMost = 2;
}

abstract class YGNodeType {
  static const int YGNodeTypeDefault = 0;
  static const int YGNodeTypeText = 1;
}

abstract class YGOverflow {
  static const int YGOverflowVisible = 0;
  static const int YGOverflowHidden = 1;
  static const int YGOverflowScroll = 2;
}

abstract class YGPositionType {
  static const int YGPositionTypeStatic = 0;
  static const int YGPositionTypeRelative = 1;
  static const int YGPositionTypeAbsolute = 2;
}

abstract class YGUnit {
  static const int YGUnitUndefined = 0;
  static const int YGUnitPoint = 1;
  static const int YGUnitPercent = 2;
  static const int YGUnitAuto = 3;
  static const int YGUnitMaxContent = 4;
  static const int YGUnitFitContent = 5;
  static const int YGUnitStretch = 6;
}

abstract class YGWrap {
  static const int YGWrapNoWrap = 0;
  static const int YGWrapWrap = 1;
  static const int YGWrapWrapReverse = 2;
}

final class YGNode extends ffi.Opaque {}

final class YGConfig extends ffi.Opaque {}

/// Handle to a mutable Yoga configuration.
typedef YGConfigRef = ffi.Pointer<YGConfig>;

/// Handle to an immutable Yoga configuration.
typedef YGConfigConstRef = ffi.Pointer<YGConfig>;

/// Function pointer type for YGConfigSetLogger.
typedef YGLogger = ffi.Pointer<ffi.NativeFunction<YGLoggerFunction>>;
typedef YGLoggerFunction = ffi.Int Function(
    YGConfigConstRef config,
    YGNodeConstRef node,
    ffi.Int32 level,
    ffi.Pointer<ffi.Char> format,
    va_list args);
typedef DartYGLoggerFunction = int Function(YGConfigConstRef config,
    YGNodeConstRef node, int level, ffi.Pointer<ffi.Char> format, va_list args);

/// Handle to an immutable Yoga Node.
typedef YGNodeConstRef = ffi.Pointer<YGNode>;
typedef va_list = __builtin_va_list;
typedef __builtin_va_list = ffi.Pointer<ffi.Char>;

/// Function pointer type for YGConfigSetCloneNodeFunc.
typedef YGCloneNodeFunc
    = ffi.Pointer<ffi.NativeFunction<YGCloneNodeFuncFunction>>;
typedef YGCloneNodeFuncFunction = YGNodeRef Function(
    YGNodeConstRef oldNode, YGNodeConstRef owner, ffi.Size childIndex);
typedef DartYGCloneNodeFuncFunction = YGNodeRef Function(
    YGNodeConstRef oldNode, YGNodeConstRef owner, int childIndex);

/// Handle to a mutable Yoga Node.
typedef YGNodeRef = ffi.Pointer<YGNode>;
typedef YGDirtiedFunc = ffi.Pointer<ffi.NativeFunction<YGDirtiedFuncFunction>>;
typedef YGDirtiedFuncFunction = ffi.Void Function(YGNodeConstRef node);
typedef DartYGDirtiedFuncFunction = void Function(YGNodeConstRef node);

final class YGSize extends ffi.Struct {
  @ffi.Float()
  external double width;

  @ffi.Float()
  external double height;
}

/// Returns the computed dimensions of the node, following the constraints of
/// `widthMode` and `heightMode`:
///
/// YGMeasureModeUndefined: The parent has not imposed any constraint on the
/// child. It can be whatever size it wants.
///
/// YGMeasureModeAtMost: The child can be as large as it wants up to the
/// specified size.
///
/// YGMeasureModeExactly: The parent has determined an exact size for the
/// child. The child is going to be given those bounds regardless of how big it
/// wants to be.
///
/// @returns the size of the leaf node, measured under the given constraints.
typedef YGMeasureFunc = ffi.Pointer<ffi.NativeFunction<YGMeasureFuncFunction>>;
typedef YGMeasureFuncFunction = YGSize Function(
    YGNodeConstRef node,
    ffi.Float width,
    ffi.Int32 widthMode,
    ffi.Float height,
    ffi.Int32 heightMode);
typedef DartYGMeasureFuncFunction = YGSize Function(YGNodeConstRef node,
    double width, int widthMode, double height, int heightMode);

/// @returns a defined offset to baseline (ascent).
typedef YGBaselineFunc
    = ffi.Pointer<ffi.NativeFunction<YGBaselineFuncFunction>>;
typedef YGBaselineFuncFunction = ffi.Float Function(
    YGNodeConstRef node, ffi.Float width, ffi.Float height);
typedef DartYGBaselineFuncFunction = double Function(
    YGNodeConstRef node, double width, double height);

final class __float2 extends ffi.Struct {
  @ffi.Float()
  external double __sinval;

  @ffi.Float()
  external double __cosval;
}

final class __double2 extends ffi.Struct {
  @ffi.Double()
  external double __sinval;

  @ffi.Double()
  external double __cosval;
}

final class exception extends ffi.Struct {
  @ffi.Int()
  external int type;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Double()
  external double arg1;

  @ffi.Double()
  external double arg2;

  @ffi.Double()
  external double retval;
}

/// Structure used to represent a dimension in a style.
final class YGValue extends ffi.Struct {
  @ffi.Float()
  external double value;

  @ffi.Int32()
  external int unit;
}

const int __bool_true_false_are_defined = 1;

const int true1 = 1;

const int false1 = 0;

const int __has_safe_buffers = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __has_bounds_safety_attributes = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;
